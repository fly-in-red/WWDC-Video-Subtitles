
1
00:00:07,007 --> 00:00:16,250
(音楽)

2
00:00:21,722 --> 00:00:28,128
(拍手)

3
00:00:28,228 --> 00:00:33,667
当セッション
“ユーザ通知の新機能”にようこそ

4
00:00:33,934 --> 00:00:37,638
私はiOS通知チームの
クリタース･ジェーン

5
00:00:37,738 --> 00:00:40,941
WWDCの場に戻れて
とてもうれしいです

6
00:00:41,041 --> 00:00:44,878
iOS 12で使えるようになる
ユーザ通知の―

7
00:00:44,978 --> 00:00:48,649
エキサイティングな新機能を
お話しします

8
00:00:49,650 --> 00:00:54,021
本日 お話しするテーマは
ご覧のとおりです

9
00:00:54,388 --> 00:00:57,457
まず最初は“グループ通知”

10
00:00:57,558 --> 00:01:01,061
iOSの通知に導入した
新パラダイムで

11
00:00:57,558 --> 00:01:01,061
iOSの通知に導入した
新パラダイムで

12
00:01:01,161 --> 00:01:04,063
ユーザの通知リストに
表示されます

13
00:01:04,498 --> 00:01:07,634
次は
“通知コンテンツExtension”

14
00:01:07,734 --> 00:01:10,304
既存の拡張ポイントです

15
00:01:10,404 --> 00:01:13,707
これらに追加された
新APIも検討します

16
00:01:14,441 --> 00:01:16,476
次は“通知管理”

17
00:01:16,577 --> 00:01:18,779
アプリケーションの
ユーザが―

18
00:01:18,879 --> 00:01:22,249
通知設定を調整できる
新しい方法と―

19
00:01:22,349 --> 00:01:26,019
それに対応する
必要な作業をご説明します

20
00:01:26,420 --> 00:01:28,789
次は“仮許可”です

21
00:01:28,889 --> 00:01:32,259
アプリケーションの
トライアルを可能にします

22
00:01:32,359 --> 00:01:34,528
ユーザの
明確な許可なしに―

23
00:01:34,628 --> 00:01:37,798
目立たない形で
通知を送れるのです

24
00:01:38,432 --> 00:01:40,767
最後は“重大な通知”

25
00:01:40,868 --> 00:01:45,539
ユーザが許可すれば
一定の設定を無視して―

26
00:01:46,240 --> 00:01:51,411
アプリケーションが
重要な通知を送れます

27
00:01:51,778 --> 00:01:54,047
以上を本日 取り上げます

28
00:01:54,181 --> 00:01:56,984
それではグループ通知から

29
00:01:59,052 --> 00:02:03,056
iOS 11までは
ユーザへの新着通知は―

30
00:01:59,052 --> 00:02:03,056
iOS 11までは
ユーザへの新着通知は―

31
00:02:03,156 --> 00:02:06,960
通知リストに
時系列で入りました

32
00:02:07,160 --> 00:02:10,464
多数のアプリケーションの
通知が入り交じり

33
00:02:10,564 --> 00:02:14,535
ユーザは特定の通知の発見や
複数の通知の―

34
00:02:14,635 --> 00:02:17,104
選別に苦労しました

35
00:02:17,638 --> 00:02:19,940
そこでiOS 12から―

36
00:02:20,040 --> 00:02:24,344
通知のグループ化を導入し
これを改善します

37
00:02:24,478 --> 00:02:28,615
ご覧のとおり 異なる
アプリケーションの通知が

38
00:02:28,749 --> 00:02:31,485
特定のグループに分かれます

39
00:02:32,219 --> 00:02:35,422
その仕組みを
詳しく見てみましょう

40
00:02:35,856 --> 00:02:39,459
グループ化は
自動的に行われるため―

41
00:02:39,560 --> 00:02:45,065
使用開始に当たり
特にすべきことはありません

42
00:02:45,299 --> 00:02:48,569
カスタムグループを
作りたい時は―

43
00:02:48,669 --> 00:02:51,305
スレッド識別子が使えます

44
00:02:51,405 --> 00:02:56,176
UNNotificationContent
オブジェクトのプロパティです

45
00:02:57,845 --> 00:03:00,781
皆さん もう
お使いでしょうか

46
00:02:57,845 --> 00:03:00,781
皆さん もう
お使いでしょうか

47
00:03:00,881 --> 00:03:02,316
ローカル通知は―

48
00:03:02,416 --> 00:03:07,087
UNMutableNotificationContent
オブジェクトで設定

49
00:03:08,255 --> 00:03:10,457
リモート通知の
ペイロードも―

50
00:03:10,557 --> 00:03:14,027
通知ペイロードの
一部として組み込めます

51
00:03:15,963 --> 00:03:20,067
スレッド識別子は
ご存じかもしれませんが―

52
00:03:21,201 --> 00:03:24,271
今日は
通知コンテンツExtensionに―

53
00:03:24,371 --> 00:03:26,607
通知を送るのに使います

54
00:03:26,707 --> 00:03:31,111
これで同じスレッド識別子の
アプリケーションは―

55
00:03:31,211 --> 00:03:36,149
コンテンツExtensionビューを
新着通知を基に更新できます

56
00:03:37,117 --> 00:03:38,519
iOS 11以降―

57
00:03:38,619 --> 00:03:43,357
通知プレビューが非表示の時
スレッド拡張子を使い

58
00:03:43,457 --> 00:03:46,627
通知をグループ化しています

59
00:03:46,960 --> 00:03:51,465
この概念をすべての通知に
適用するのです

60
00:03:52,933 --> 00:03:55,102
では その仕組みは？

61
00:03:55,335 --> 00:03:59,173
ユーザのデバイスに届いた
新着通知は―

62
00:03:59,273 --> 00:04:03,243
スレッド識別子が
全くなかった場合―

63
00:03:59,273 --> 00:04:03,243
スレッド識別子が
全くなかった場合―

64
00:04:03,410 --> 00:04:07,247
アプリケーションバンドルと
グループ化

65
00:04:08,048 --> 00:04:10,584
このサンプルで
ご覧のとおり―

66
00:04:10,684 --> 00:04:15,489
新着通知は同じグループに
まとめられ―

67
00:04:15,656 --> 00:04:18,725
そのコンテンツは
更新されます

68
00:04:18,959 --> 00:04:21,695
ユーザは
これを展開するだけで―

69
00:04:21,795 --> 00:04:25,032
グループ内の
全通知が見られます

70
00:04:27,167 --> 00:04:31,839
一方 スレッド識別子が
設定されている通知は―

71
00:04:31,939 --> 00:04:36,276
同じスレッド識別子を持つ
アプリケーションの通知と―

72
00:04:36,376 --> 00:04:38,478
グループ化されます

73
00:04:39,146 --> 00:04:41,582
また その
アプリケーションは―

74
00:04:41,682 --> 00:04:43,717
設定した
スレッド識別子から―

75
00:04:43,817 --> 00:04:47,287
複数のカスタムグループも
作れます

76
00:04:48,722 --> 00:04:51,625
例えば この
メッセージアプリケーション

77
00:04:51,725 --> 00:04:53,994
２つのスレッドがあり―

78
00:04:54,094 --> 00:04:58,765
新着通知は
各自のグループに移動します

79
00:05:00,801 --> 00:05:06,139
ユーザはグループを展開し
その全通知を見られます

80
00:05:06,807 --> 00:05:10,444
スレッド識別子の使用で
これが可能になる

81
00:05:12,379 --> 00:05:13,914
また ユーザは―

82
00:05:14,014 --> 00:05:17,684
通知のグループ化の設定を
調整できます

83
00:05:17,784 --> 00:05:21,021
アプリケーションごとの
通知設定のページで

84
00:05:21,288 --> 00:05:23,423
選択肢は この３つ

85
00:05:23,524 --> 00:05:27,694
“自動”は
ご説明したとおりの動作です

86
00:05:28,996 --> 00:05:33,033
“アプリケーションごとに
グループ化”も選べます

87
00:05:33,133 --> 00:05:35,836
システムが
スレッド識別子を無視し―

88
00:05:35,936 --> 00:05:38,872
全通知を
１つのグループにします

89
00:05:40,207 --> 00:05:44,344
現在のiOS 11の既存動作と
同じにしたければ―

90
00:05:44,478 --> 00:05:48,248
通知のグループを
“オフ”にするだけ

91
00:05:48,348 --> 00:05:51,351
カスタムグループは
通知の受信時に―

92
00:05:51,451 --> 00:05:54,755
十分なユーザ価値を
提供することを―

93
00:05:54,922 --> 00:05:57,257
覚えておいてください

94
00:05:58,959 --> 00:06:02,496
では 通知グループの
構成要素の違いは？

95
00:05:58,959 --> 00:06:02,496
では 通知グループの
構成要素の違いは？

96
00:06:03,330 --> 00:06:08,502
表示されるコンテンツは
そのグループの最新通知です

97
00:06:09,870 --> 00:06:12,940
そのグループを
タップするだけで―

98
00:06:13,040 --> 00:06:14,908
全通知を見られます

99
00:06:15,008 --> 00:06:17,678
全通知のコンテンツが
展開し―

100
00:06:17,811 --> 00:06:21,515
ユーザは通知を
個別に操作できます

101
00:06:22,149 --> 00:06:26,553
一番上の２つのボタンで
スタックの非表示と―

102
00:06:26,653 --> 00:06:29,890
通知の一括消去もできます

103
00:06:32,359 --> 00:06:36,797
グループ化で通知の選別も
一段と楽になります

104
00:06:36,897 --> 00:06:38,532
例えば この場合は―

105
00:06:38,632 --> 00:06:43,804
右スワイプと“すべて消去”で
通知をまとめて消せます

106
00:06:46,340 --> 00:06:51,211
コンテンツとは別に
概要テキストも表示します

107
00:06:51,311 --> 00:06:54,147
概要テキストは
デフォルトでは―

108
00:06:54,248 --> 00:06:57,484
そのグループの
通知の数を表示します

109
00:06:58,585 --> 00:07:01,355
しかし
カスタマイズできるので

110
00:06:58,585 --> 00:07:01,355
しかし
カスタマイズできるので

111
00:07:01,455 --> 00:07:04,424
そのグループの情報を
ユーザに―

112
00:07:04,525 --> 00:07:07,494
はるかによく伝えられます

113
00:07:09,229 --> 00:07:11,165
このAPIと―

114
00:07:11,265 --> 00:07:15,936
カスタムグループ生成の
ユースケースは―

115
00:07:16,036 --> 00:07:20,474
この後のセッションで
詳細に見ていきます

116
00:07:22,209 --> 00:07:25,979
ではグループ通知を
簡単にまとめます

117
00:07:26,580 --> 00:07:27,981
iOS 12以降―

118
00:07:28,081 --> 00:07:31,718
アプリケーション通知は
自動的にグループ化

119
00:07:33,187 --> 00:07:35,355
スレッド識別子を使って―

120
00:07:35,455 --> 00:07:39,026
独自のカスタムグループを
生成できます

121
00:07:39,960 --> 00:07:43,230
しかし通知のグループ化の
設定は―

122
00:07:43,330 --> 00:07:45,499
ユーザ側で変更できます

123
00:07:47,301 --> 00:07:49,303
最後に
概要テキストを使い―

124
00:07:49,403 --> 00:07:52,639
ユーザに提供したい
通知グループの情報を―

125
00:07:52,739 --> 00:07:55,275
カスタマイズできます

126
00:07:57,678 --> 00:07:59,513
以上がグループ通知です

127
00:07:59,746 --> 00:08:01,748
では次のテーマ

128
00:07:59,746 --> 00:08:01,748
では次のテーマ

129
00:08:01,882 --> 00:08:05,052
通知コンテンツExtensionです

130
00:08:06,253 --> 00:08:08,989
iOS 10の
コンテンツExtensionで―

131
00:08:09,089 --> 00:08:11,124
ご存じかもしれません

132
00:08:11,825 --> 00:08:16,797
コンテンツExtensionにより
アプリケーションの―

133
00:08:16,897 --> 00:08:19,433
リッチ通知ビューが
実現します

134
00:08:19,533 --> 00:08:23,237
一段とカスタマイズされた
対話型の―

135
00:08:23,337 --> 00:08:26,139
通知インターフェイスが
作れます

136
00:08:27,407 --> 00:08:30,410
設定の概要を
簡単に説明します

137
00:08:31,245 --> 00:08:33,145
Xcodeの
標準テンプレートで―

138
00:08:33,280 --> 00:08:36,950
コンテンツExtensionの
ターゲットを追加します

139
00:08:38,485 --> 00:08:42,890
NotificationViewControllerの
デフォルトクラスが生成され

140
00:08:42,990 --> 00:08:47,161
UNNotificationContentExtension
プロトコルを実装

141
00:08:47,494 --> 00:08:50,964
ここで重要なのは
didReceive通知メソッド

142
00:08:51,064 --> 00:08:54,201
コンテンツExtensionビューを
設定する―

143
00:08:54,301 --> 00:08:55,969
エントリポイントです

144
00:08:56,169 --> 00:08:58,839
ここで渡した
通知オブジェクトで―

145
00:08:58,972 --> 00:09:03,610
通知の全情報を取得し
カスタムビューを設定

146
00:08:58,972 --> 00:09:03,610
通知の全情報を取得し
カスタムビューを設定

147
00:09:05,612 --> 00:09:08,749
関連づけられた
Info.plistで―

148
00:09:08,849 --> 00:09:10,551
さらにオプションを取得

149
00:09:11,151 --> 00:09:14,254
ここで重要なのは
カテゴリ識別子

150
00:09:14,354 --> 00:09:17,791
通知リクエストに設定する
識別子と―

151
00:09:17,891 --> 00:09:20,294
一致させる必要があります

152
00:09:20,394 --> 00:09:23,263
どの通知の
どのコンテンツExtensionか―

153
00:09:23,363 --> 00:09:25,032
システムに把握させます

154
00:09:26,466 --> 00:09:31,405
コンテンツExtensionの
簡易設定も同時に可能です

155
00:09:31,505 --> 00:09:35,475
初期のサイズ比や
デフォルトコンテンツの非表示

156
00:09:35,576 --> 00:09:38,946
そしてタイトルの
オーバーライドです

157
00:09:39,980 --> 00:09:44,484
ユーザは主に これらの
コンテンツExtensionを―

158
00:09:44,585 --> 00:09:46,487
通知アクションで操作します

159
00:09:46,587 --> 00:09:51,191
コンテンツExtensionの
コンテンツの下に表示されます

160
00:09:52,326 --> 00:09:55,229
このアクションの
設定の仕方も簡単に

161
00:09:56,029 --> 00:09:58,298
コードは かなり単純です

162
00:09:58,398 --> 00:10:02,202
likeとcommentの
２つのアクションがあり―

163
00:09:58,398 --> 00:10:02,202
likeとcommentの
２つのアクションがあり―

164
00:10:02,436 --> 00:10:05,839
likeの単純な
UNNotificationActionと―

165
00:10:06,607 --> 00:10:09,343
commentの
テキスト入力アクションを生成

166
00:10:11,778 --> 00:10:14,982
次に新しいカテゴリを
作成します

167
00:10:15,082 --> 00:10:18,285
アクションを表示する
コンテンツExtensionと―

168
00:10:18,385 --> 00:10:20,654
同じ識別子を与えます

169
00:10:21,855 --> 00:10:25,025
次に 生成した
２つのアクションを渡します

170
00:10:27,528 --> 00:10:29,296
次に クラスに関連づけた―

171
00:10:29,396 --> 00:10:32,099
UNUserNotificationCenter
オブジェクトの―

172
00:10:32,199 --> 00:10:36,003
setNotificationCategoriesを
呼び出し

173
00:10:36,103 --> 00:10:38,539
生成した新カテゴリを登録

174
00:10:41,041 --> 00:10:45,145
これでユーザは次回から
コンテンツExtensionで―

175
00:10:45,245 --> 00:10:48,215
これらのアクションを
実行でき―

176
00:10:48,315 --> 00:10:50,784
通知コンテンツを
操作できます

177
00:10:51,418 --> 00:10:55,756
アクションのレスポンスの
ハンドルの仕方は―

178
00:10:55,856 --> 00:10:57,691
２つあります

179
00:10:58,525 --> 00:11:01,828
まずはAppDelegateで
これは―

180
00:10:58,525 --> 00:11:01,828
まずはAppDelegateで
これは―

181
00:11:01,929 --> 00:11:04,898
UNUserNotificationCenter
デリゲートプロトコルを―

182
00:11:04,998 --> 00:11:08,268
実装したアプリケーションに
関連づけられています

183
00:11:08,368 --> 00:11:14,608
関数userNotificationCenterの
didReceiveレスポンスに―

184
00:11:14,708 --> 00:11:17,277
ユーザが
アクションを実行した―

185
00:11:17,377 --> 00:11:20,480
通知リクエストの情報を
組み込みます

186
00:11:21,315 --> 00:11:26,019
しかし このレスポンスに
インターセプトして―

187
00:11:26,119 --> 00:11:28,255
ビューを更新し―

188
00:11:28,355 --> 00:11:33,026
より対話的で動的な
ユーザ体験を実現できます

189
00:11:33,460 --> 00:11:37,865
didReceiveレスポンスメソッドを
入力し―

190
00:11:38,265 --> 00:11:41,368
likeの
アクション識別子をチェック

191
00:11:42,069 --> 00:11:44,905
そしてUIを
新しいラベルで更新し

192
00:11:45,005 --> 00:11:47,341
アプリケーション状態も
更新します

193
00:11:48,642 --> 00:11:51,712
doNotDismissの
completionブロックを呼び出します

194
00:11:51,812 --> 00:11:54,581
コンテンツExtensionビューを
閉じたければ―

195
00:11:54,681 --> 00:11:59,620
completionブロックに渡す
パラメータをdismissに

196
00:12:00,487 --> 00:12:02,256
または
dismissAndForwardで―

197
00:12:02,356 --> 00:12:05,726
AppDelegate関数に
レスポンスを転送します

198
00:12:06,293 --> 00:12:10,964
これで Likeアクションを
ユーザが実行すると―

199
00:12:11,064 --> 00:12:14,701
コンテンツは
その場ですぐに更新されます

200
00:12:14,835 --> 00:12:19,706
ユーザはリアルタイムの
フィードバックが得られます

201
00:12:21,341 --> 00:12:25,746
ただ コンテンツExtensionの
現在の状態を見ると―

202
00:12:25,846 --> 00:12:28,582
冗長な情報があります

203
00:12:28,916 --> 00:12:31,318
Likeアクションは
実行済みで―

204
00:12:31,418 --> 00:12:34,888
そのアクションがあっても
無駄です

205
00:12:36,390 --> 00:12:40,527
通知アクションは原則として
一定の制限があります

206
00:12:41,461 --> 00:12:43,063
あまり動的でなく―

207
00:12:43,163 --> 00:12:47,467
コンテントExtensionの
コンテキストによる更新は不可

208
00:12:49,069 --> 00:12:52,372
アプリケーション設定時に
定義する―

209
00:12:52,472 --> 00:12:56,176
通知カテゴリに
関連づけられることも多い

210
00:12:56,810 --> 00:12:59,079
こうした問題に
我々は対処し―

211
00:12:59,179 --> 00:13:03,116
通知アクションの
新APIを導入しました

212
00:12:59,179 --> 00:13:03,116
通知アクションの
新APIを導入しました

213
00:13:03,217 --> 00:13:05,886
そのnotificationActionsを
公開します

214
00:13:05,986 --> 00:13:07,988
コンテンツExtensionに
関連づけた―

215
00:13:08,088 --> 00:13:10,123
NSExtensionContextの
一部です

216
00:13:10,524 --> 00:13:13,293
このAPIで
ユーザに表示されている―

217
00:13:13,393 --> 00:13:16,463
通知アクションに
アクセスできます

218
00:13:16,563 --> 00:13:18,298
アクションの差し替えも可能

219
00:13:18,398 --> 00:13:23,303
このnotificationActionsの
新しい配列を設定します

220
00:13:25,439 --> 00:13:26,907
サンプルで言うと―

221
00:13:27,007 --> 00:13:29,409
Likeアクションが
実行された後―

222
00:13:29,510 --> 00:13:32,212
Unlikeアクションに
差し替えるには？

223
00:13:32,312 --> 00:13:35,182
逆のアクションを
実行できるように

224
00:13:36,850 --> 00:13:41,054
この新APIを使って
設定してみましょう

225
00:13:41,255 --> 00:13:44,391
やはりdidReceiveレスポンス
メソッドで―

226
00:13:44,491 --> 00:13:48,262
Likeアクションを識別し
アプリケーション状態を更新

227
00:13:49,129 --> 00:13:52,699
今度はUnlikeアクションも
生成します

228
00:13:52,799 --> 00:13:55,903
タイトルと
一意識別子をつけます

229
00:13:57,704 --> 00:14:01,074
また 表示中の
アクションから―

230
00:13:57,704 --> 00:14:01,074
また 表示中の
アクションから―

231
00:14:01,174 --> 00:14:05,746
commentActionを抽出すれば
再度 生成せずに済みます

232
00:14:07,481 --> 00:14:11,185
次に 生成したnewActionsの
新しい配列を生成し―

233
00:14:11,752 --> 00:14:15,355
notificationActions変数を
設定するだけ

234
00:14:17,691 --> 00:14:21,128
これで Likeアクションを
ユーザが実行すると―

235
00:14:21,228 --> 00:14:25,599
UIが自動更新し
新しいアクションを表示

236
00:14:25,999 --> 00:14:28,368
この状態を
どうハンドルするかにより―

237
00:14:28,469 --> 00:14:31,839
ユーザは２つのアクションを
切り替えられます

238
00:14:32,773 --> 00:14:36,276
このAPIは
複数の使い方ができます

239
00:14:36,443 --> 00:14:39,213
didReceive通知メソッドで―

240
00:14:39,313 --> 00:14:42,249
コンテンツExtensionビュー
設定時に―

241
00:14:42,349 --> 00:14:44,785
アクションを
設定できるようになりました

242
00:14:44,918 --> 00:14:49,590
通知リクエストがカテゴリに
関連づけられることなく―

243
00:14:49,690 --> 00:14:53,360
表示したいアクションを
定義できます

244
00:14:55,562 --> 00:14:58,532
また 表示中のアクションを
差し替えて―

245
00:14:58,665 --> 00:15:01,001
アクションの２次セットを
表示できます

246
00:14:58,665 --> 00:15:01,001
アクションの２次セットを
表示できます

247
00:15:01,101 --> 00:15:04,371
例えば先行のアクションが
“評価”だったら―

248
00:15:04,471 --> 00:15:06,573
ユーザに実行してほしい―

249
00:15:06,673 --> 00:15:10,143
各種の“評価”の
２次リストを提供できます

250
00:15:12,379 --> 00:15:15,782
これらの通知アクションの
全消去も可能です

251
00:15:15,883 --> 00:15:18,652
これらのアクションを
表示していても―

252
00:15:18,752 --> 00:15:21,188
もう意味がないと
感じた時です

253
00:15:23,624 --> 00:15:26,527
以上が通知アクションの
新APIです

254
00:15:26,627 --> 00:15:29,596
さまざまなアクションを
表示でき―

255
00:15:29,696 --> 00:15:33,300
コンテンツExtentionの
ユーザ体験を―

256
00:15:33,400 --> 00:15:36,303
高めるのに役立つでしょう

257
00:15:39,072 --> 00:15:42,976
次はユーザの
コンテンツExtension操作

258
00:15:43,710 --> 00:15:48,849
通知アクションは
今までは重要でした

259
00:15:49,383 --> 00:15:50,350
iOS 11まで―

260
00:15:50,451 --> 00:15:54,955
コンテンツExtensionビューは
タッチ操作できなかったので

261
00:15:56,256 --> 00:15:58,692
多くのフィードバックを
頂きました

262
00:15:58,792 --> 00:16:03,564
iOS 12では この制限を
なくすことをご報告します

263
00:15:58,792 --> 00:16:03,564
iOS 12では この制限を
なくすことをご報告します

264
00:16:03,697 --> 00:16:07,701
(拍手)

265
00:16:07,801 --> 00:16:11,505
コンテンツExtentionは
ユーザのタッチ操作を―

266
00:16:11,605 --> 00:16:14,107
受けつける選択ができます

267
00:16:15,676 --> 00:16:17,878
この設定は かなり簡単です

268
00:16:17,978 --> 00:16:21,014
新たな
キー値オプションを―

269
00:16:21,114 --> 00:16:23,784
Info.plistファイルに
足すだけ

270
00:16:25,085 --> 00:16:26,386
追加するキーは―

271
00:16:26,487 --> 00:16:30,891
UNNotificationExtensionUser
InteractionEnabled

272
00:16:32,759 --> 00:16:34,528
サンプルに戻って―

273
00:16:34,628 --> 00:16:38,966
通知アクションから
Likeアクションを削除し―

274
00:16:39,066 --> 00:16:43,504
ビューのUIのタッチ操作に
したい場合は？

275
00:16:44,371 --> 00:16:46,974
Info.plistファイルを
設定したら―

276
00:16:47,074 --> 00:16:49,810
コンテンツExtensionビューに
戻り―

277
00:16:49,910 --> 00:16:53,714
likeジェスチャをハンドルする
カスタムボタンを生成

278
00:16:54,915 --> 00:16:57,551
プライベートメソッドの
ターゲットを追加し

279
00:16:59,019 --> 00:17:04,191
この関数内でUIと
アプリケーション状態を更新

280
00:16:59,019 --> 00:17:04,191
この関数内でUIと
アプリケーション状態を更新

281
00:17:05,459 --> 00:17:09,229
独自のユーザ操作を
実装するので―

282
00:17:09,329 --> 00:17:12,499
ユーザのアクション
レスポンス コールバックを

283
00:17:12,598 --> 00:17:15,636
すべてハンドルできるのです

284
00:17:18,137 --> 00:17:19,807
これを設定すると―

285
00:17:20,174 --> 00:17:25,179
コンテンツExtensionのUI上に
Likeボタンが表示され―

286
00:17:25,279 --> 00:17:29,016
ユーザはその場ですぐに
ボタンを操作できます

287
00:17:33,187 --> 00:17:37,191
以上がコンテンツExtentionで
追加した新機能

288
00:17:37,291 --> 00:17:41,094
通知アクションと
タッチ操作の合わせ技です

289
00:17:41,195 --> 00:17:43,864
豊富なツールで
通知のユーザに対し―

290
00:17:43,997 --> 00:17:47,668
コンテンツExtentionの
対話的で動的な―

291
00:17:47,768 --> 00:17:50,737
ユーザ体験を生み出せます

292
00:17:52,739 --> 00:17:54,942
次は
通知コンテンツExtentionから―

293
00:17:55,075 --> 00:17:57,244
アプリケーションを
起動する方法

294
00:17:58,712 --> 00:18:02,182
現在はタッチ操作が
できなくても―

295
00:17:58,712 --> 00:18:02,182
現在はタッチ操作が
できなくても―

296
00:18:02,282 --> 00:18:06,820
コンテンツExtensionビューを
タップして起動できます

297
00:18:08,222 --> 00:18:12,626
または左上隅の
アプリケーションアイコンをタップ

298
00:18:14,127 --> 00:18:19,666
フォアグラウンドアクションを
生成して起動させることも可能

299
00:18:21,101 --> 00:18:24,738
カスタムコントロールから
起動したい場合は？

300
00:18:25,839 --> 00:18:28,542
プログラムで
起動したい場合は？

301
00:18:29,076 --> 00:18:31,478
NSExtensionContextの
新API―

302
00:18:31,578 --> 00:18:37,684
performNotificationDefault
Actionが これを可能にします

303
00:18:40,521 --> 00:18:42,923
デフォルトアクションとは？

304
00:18:43,023 --> 00:18:45,993
アプリケーションを
起動しますが―

305
00:18:46,393 --> 00:18:49,329
アプリケーションデリゲートの
userNotificationCenterの―

306
00:18:49,429 --> 00:18:52,900
didReceiveレスポンスメソッドも
呼び出します

307
00:18:54,034 --> 00:18:56,670
UNNotificationResponse
オブジェクトは―

308
00:18:56,770 --> 00:18:59,039
ユーザの通知の情報を
収容します

309
00:18:59,139 --> 00:19:03,811
アプリケーション状態を
この通知を基に更新できます

310
00:18:59,139 --> 00:19:03,811
アプリケーション状態を
この通知を基に更新できます

311
00:19:04,611 --> 00:19:06,413
ここで渡された識別子は―

312
00:19:06,513 --> 00:19:10,117
UNNotificationDefault
ActionIdentifier

313
00:19:11,285 --> 00:19:15,589
カスタムコントロールの
設定の仕方を見てみましょう

314
00:19:17,291 --> 00:19:21,495
全コメントを見るための
UIButtonを生成します

315
00:19:22,829 --> 00:19:26,633
次にプライベート関数と
関連づけて―

316
00:19:27,434 --> 00:19:29,436
performNotification
DefaultActionを―

317
00:19:29,536 --> 00:19:31,438
関数内で呼び出すだけ

318
00:19:31,705 --> 00:19:34,441
これで このメソッドを
プログラムで―

319
00:19:34,541 --> 00:19:38,812
コンテンツExtensionコードの
どこからでも呼び出せます

320
00:19:40,614 --> 00:19:43,050
以上がアプリケーションの
起動です

321
00:19:43,350 --> 00:19:45,886
コンテンツExtensionビューを
閉じるには？

322
00:19:48,422 --> 00:19:51,425
現行では
ユーザはどうやっているか

323
00:19:51,525 --> 00:19:54,795
右上隅の
Dismissボタンをタップ

324
00:19:56,196 --> 00:19:59,466
独自に生成した
カスタム通知アクションで―

325
00:19:59,566 --> 00:20:02,302
ビューを閉じることも
できます

326
00:19:59,566 --> 00:20:02,302
ビューを閉じることも
できます

327
00:20:02,669 --> 00:20:07,007
completionブロックに
dismissを渡せば設定できます

328
00:20:08,642 --> 00:20:13,213
独自のカスタムボタンで
ビューを閉じたい場合は？

329
00:20:13,313 --> 00:20:15,215
しかもプログラムで

330
00:20:15,315 --> 00:20:18,685
例えばユーザが“Like”を
タップすると閉じる

331
00:20:18,786 --> 00:20:22,523
コンテンツExtentionの操作を
終えたという解釈です

332
00:20:23,624 --> 00:20:26,093
これを可能にするのも新API

333
00:20:26,193 --> 00:20:28,462
NSExtensionContextの―

334
00:20:28,562 --> 00:20:30,898
dismissNotification
ContentExtension

335
00:20:33,066 --> 00:20:36,770
Likeボタンの設定の仕方に
戻りますが 今度は―

336
00:20:36,870 --> 00:20:40,574
コンテンツExtensonビューを
閉じるために追加した―

337
00:20:40,674 --> 00:20:42,643
新しい関数も呼び出します

338
00:20:44,978 --> 00:20:48,382
これでユーザが
Likeアクションを実行すると―

339
00:20:48,482 --> 00:20:50,984
コンテンツExtensionビューが
閉じます

340
00:20:52,686 --> 00:20:55,656
１つ注意なのが
このメソッドを呼び出しても―

341
00:20:55,756 --> 00:20:59,193
ユーザに送った通知は
取り消されません

342
00:20:59,726 --> 00:21:02,896
取り消したい場合
既存のAPIを使います

343
00:20:59,726 --> 00:21:02,896
取り消したい場合
既存のAPIを使います

344
00:21:02,996 --> 00:21:07,568
removeDeliveredNotifications
(withIdentifiers:)

345
00:21:09,870 --> 00:21:13,774
通知コンテンツExtensionの
新APIについて―

346
00:21:13,874 --> 00:21:16,276
ここでまとめましょう

347
00:21:18,745 --> 00:21:21,515
最初にご説明した
通知アクションは―

348
00:21:21,615 --> 00:21:24,318
これらの通知アクションに
アクセスでき―

349
00:21:24,418 --> 00:21:28,622
コードのどこからでも
動的に差し替えられます

350
00:21:31,558 --> 00:21:34,828
コンテンツExtensionビュー内の
ユーザのタッチ操作を―

351
00:21:34,928 --> 00:21:36,930
選べるようになりました

352
00:21:38,999 --> 00:21:41,802
コードのどこからでも
アプリケーションを―

353
00:21:41,902 --> 00:21:43,804
プログラムで起動できます

354
00:21:44,571 --> 00:21:47,207
コンテンツExtensionビューを―

355
00:21:47,307 --> 00:21:52,813
ユーザ体験を最も高めると
思われる所で閉じられます

356
00:21:54,448 --> 00:21:57,518
こうした多様なAPIが
皆さんの―

357
00:21:57,618 --> 00:22:02,489
コンテンツExtensionの
ユーザ体験向上に―

358
00:21:57,618 --> 00:22:02,489
コンテンツExtensionの
ユーザ体験向上に―

359
00:22:02,589 --> 00:22:04,558
お役に立てば幸いです

360
00:22:05,392 --> 00:22:07,661
通知コンテンツExtensionでした

361
00:22:07,761 --> 00:22:11,999
本日の次のテーマは
通知管理です

362
00:22:12,099 --> 00:22:16,270
ここからは同僚のテジャが
ご説明します

363
00:22:16,537 --> 00:22:22,509
(拍手)

364
00:22:22,976 --> 00:22:23,911
ありがとう

365
00:22:24,011 --> 00:22:26,880
こんにちは
テジャ･コンダパリです

366
00:22:26,980 --> 00:22:30,350
私もiOS通知チームの
技術者です

367
00:22:30,450 --> 00:22:34,955
我々の新APIのいくつかを
ご説明したいと思います

368
00:22:35,055 --> 00:22:38,892
まず最初は“通知管理”です

369
00:22:39,092 --> 00:22:41,094
ただ このAPIの前に―

370
00:22:41,195 --> 00:22:44,464
ユーザ向け機能を
取り上げて―

371
00:22:45,666 --> 00:22:49,436
解説を加えてから
このAPIに取り掛かります

372
00:22:52,973 --> 00:22:55,809
増える一方の
アプリケーションを―

373
00:22:55,909 --> 00:22:59,947
ユーザは主に通知で
操作するようになります

374
00:23:00,380 --> 00:23:04,852
しかし ユーザは
こんな状況に陥りがちです

375
00:23:05,052 --> 00:23:07,554
通知があまりにも多く―

376
00:23:07,654 --> 00:23:11,625
重要な通知の選別が
難しくなります

377
00:23:12,859 --> 00:23:16,763
このユーザの場合
より楽に選別するため―

378
00:23:16,864 --> 00:23:21,034
Podcastからの通知を
ロック画面に表示しません

379
00:23:21,368 --> 00:23:25,472
これは現行では
設定アプリケーションを起動し

380
00:23:25,572 --> 00:23:27,307
通知を見つけ―

381
00:23:27,407 --> 00:23:29,276
Podcast Appを見つけ―

382
00:23:29,376 --> 00:23:31,879
ようやく設定できます

383
00:23:32,679 --> 00:23:34,414
これを簡単にしたいので―

384
00:23:34,515 --> 00:23:38,685
iOS 12では
新たに管理ビューを導入

385
00:23:39,620 --> 00:23:41,054
ユーザは―

386
00:23:41,155 --> 00:23:45,159
設定Appを起動せずに
ここで直接―

387
00:23:45,259 --> 00:23:47,728
通知の設定ができます

388
00:23:51,064 --> 00:23:54,234
この管理ビューに
簡単に入れる方法が３つ

389
00:23:54,334 --> 00:23:56,270
１つはご覧のとおりです

390
00:23:56,370 --> 00:23:58,705
単純に通知を
スワイプして―

391
00:23:58,872 --> 00:24:02,242
“管理”をタップすれば
管理ビューが出ます

392
00:23:58,872 --> 00:24:02,242
“管理”をタップすれば
管理ビューが出ます

393
00:24:03,977 --> 00:24:05,345
２つ目は―

394
00:24:06,113 --> 00:24:10,284
リッチ通知に入れれば
右隅をタップして―

395
00:24:10,384 --> 00:24:12,486
管理ビューを起動できます

396
00:24:14,288 --> 00:24:16,990
そして３つ目は
リストそのもの

397
00:24:17,090 --> 00:24:20,527
通知の操作方法によっては
ユーザに対し―

398
00:24:20,627 --> 00:24:23,530
時々 こういう提案が
なされます

399
00:24:23,630 --> 00:24:27,634
Podcastの通知を
受信し続けるか 聞きます

400
00:24:27,768 --> 00:24:30,604
ここからも
“管理”をタップして―

401
00:24:30,704 --> 00:24:32,539
管理ビューを出せます

402
00:24:34,308 --> 00:24:36,610
詳しく見てみましょう

403
00:24:36,743 --> 00:24:38,912
もちろん選択肢があって―

404
00:24:39,012 --> 00:24:43,383
ユーザは このビューから
直接 通知を設定できます

405
00:24:44,017 --> 00:24:49,490
ですが設定Appに入って
詳細な設定をしたい時は―

406
00:24:49,823 --> 00:24:54,895
クイックリンクでPodcastの
通知の設定に飛べます

407
00:24:57,064 --> 00:25:00,901
ここから直接 実行できる
アクションもあります

408
00:24:57,064 --> 00:25:00,901
ここから直接 実行できる
アクションもあります

409
00:25:01,101 --> 00:25:03,570
１つ目は
“目立たない形で配信”

410
00:25:03,670 --> 00:25:06,740
おそらく皆さんが未知の
概念です

411
00:25:07,341 --> 00:25:12,412
これが“目立つ形で配信”となる
管理ビューもあります

412
00:25:12,513 --> 00:25:14,081
ご説明します

413
00:25:16,483 --> 00:25:20,587
iOSには
ユーザができる設定が多く

414
00:25:20,687 --> 00:25:23,056
パワーユーザには最高です

415
00:25:23,156 --> 00:25:26,093
設定を細部まで
カスタマイズできます

416
00:25:26,360 --> 00:25:30,731
しかし我々は一般ユーザも
支援できると思います

417
00:25:30,831 --> 00:25:35,569
大きく２つのカテゴリに
通知設定を分けるのです

418
00:25:35,903 --> 00:25:38,472
“目立つ形で配信”と―

419
00:25:38,572 --> 00:25:41,241
“目立たない形で配信”です

420
00:25:43,277 --> 00:25:46,847
通知を目立つ形で配信するのは
慣れています

421
00:25:46,947 --> 00:25:48,816
ロック画面に表示されます

422
00:25:49,817 --> 00:25:51,685
Notification Centerに
表示されます

423
00:25:51,952 --> 00:25:53,654
バナーとして表示され―

424
00:25:54,087 --> 00:25:57,724
Appアイコンにバッジを表示し
サウンドを鳴らす

425
00:25:59,259 --> 00:26:01,662
目立たない形で配信される
通知は―

426
00:25:59,259 --> 00:26:01,662
目立たない形で配信される
通知は―

427
00:26:01,762 --> 00:26:05,999
Notification Centerに表示され
サウンドは鳴りません

428
00:26:08,135 --> 00:26:10,804
管理ビューでは
通知の配信を―

429
00:26:10,904 --> 00:26:16,276
目立たせるかどうか
設定できるだけなく―

430
00:26:16,376 --> 00:26:20,547
ユーザは通知を
オフにする選択もできます

431
00:26:21,515 --> 00:26:24,618
自分のアプリケーションの
通知を―

432
00:26:24,718 --> 00:26:27,454
オフにするのではと
心配ですよね

433
00:26:27,654 --> 00:26:30,824
“オフにする”を
タップした場合に備え―

434
00:26:30,924 --> 00:26:33,594
この確認シートを
追加しました

435
00:26:33,694 --> 00:26:37,231
ここから通知を
オフにすることもできます

436
00:26:37,331 --> 00:26:39,333
しかし我々は
APIを追加し―

437
00:26:39,433 --> 00:26:43,136
この確認シートに
第２の選択肢を追加

438
00:26:43,237 --> 00:26:46,507
Podcastが
このAPIを利用しています

439
00:26:46,607 --> 00:26:48,976
“Podcastで設定する”

440
00:26:49,476 --> 00:26:53,881
このリンクはPodcast Appの
カスタム設定ビューへの―

441
00:26:53,981 --> 00:26:55,983
ディープリンクです

442
00:26:56,083 --> 00:26:58,986
どんな通知が欲しいか―

443
00:26:59,086 --> 00:27:02,956
ユーザがより細かく
コントロールできます

444
00:26:59,086 --> 00:27:02,956
ユーザがより細かく
コントロールできます

445
00:27:04,291 --> 00:27:08,862
アプリケーションの通知は
数も種類も多くなります

446
00:27:08,962 --> 00:27:11,565
そこで重要なのは―

447
00:27:11,665 --> 00:27:14,635
どんな通知が重要なのかを
ユーザが―

448
00:27:14,735 --> 00:27:18,272
細かく
コントロールできることです

449
00:27:21,675 --> 00:27:25,812
アプリケーションの
通知設定からも―

450
00:27:25,913 --> 00:27:28,382
このリンクに
アクセスできます

451
00:27:28,482 --> 00:27:31,518
Podcastの場合 一番下の―

452
00:27:31,618 --> 00:27:34,454
“Podcast通知設定”です

453
00:27:35,923 --> 00:27:37,925
コードを見てみましょう

454
00:27:39,226 --> 00:27:44,097
UNUserNotificationCenter
Delegateに準拠しているクラスの

455
00:27:44,198 --> 00:27:46,333
新しい
デリゲートメソッドです

456
00:27:46,433 --> 00:27:49,603
openSettingsFor notification

457
00:27:49,703 --> 00:27:52,773
このデリゲートメソッドを
実装していれば―

458
00:27:52,906 --> 00:27:56,877
この 設定アプリケーションや
管理ビューからのリンクは―

459
00:27:56,977 --> 00:28:00,647
システムにより
自動的に追加されます

460
00:27:56,977 --> 00:28:00,647
システムにより
自動的に追加されます

461
00:28:01,615 --> 00:28:05,786
リンクをタップすると
このメソッドが呼び出されます

462
00:28:06,820 --> 00:28:09,022
そして非常に重要なのは―

463
00:28:09,122 --> 00:28:13,260
このメソッドによって
すぐにビューへ飛べることです

464
00:28:13,360 --> 00:28:17,831
ユーザはアプリケーション内で
通知設定できます

465
00:28:19,233 --> 00:28:21,435
そして お気づきでしょうか

466
00:28:21,535 --> 00:28:26,006
これにはパラメータがあります
notificationです

467
00:28:26,106 --> 00:28:28,542
リンクがタップされた
場所により…

468
00:28:28,642 --> 00:28:31,044
管理ビューから
タップされた場合―

469
00:28:31,145 --> 00:28:35,415
そこから出されたという
notificationの値が得られます

470
00:28:35,916 --> 00:28:38,418
設定アプリケーションからの
場合―

471
00:28:38,519 --> 00:28:41,221
notificationの値は
nilになります

472
00:28:41,321 --> 00:28:45,826
このメソッドが呼び出された時
この情報を使って―

473
00:28:45,926 --> 00:28:48,161
適切な通知設定を
表示できます

474
00:28:50,731 --> 00:28:53,467
以上が通知管理です

475
00:28:53,567 --> 00:28:56,370
この新しい方法で
ユーザは―

476
00:28:56,470 --> 00:29:01,575
通知の配信を目立たせるかどうか
設定できます

477
00:28:56,470 --> 00:29:01,575
通知の配信を目立たせるかどうか
設定できます

478
00:29:01,675 --> 00:29:06,113
通知をオフにすることも
アプリケーション内で―

479
00:29:06,980 --> 00:29:08,782
細かく設定することも可能

480
00:29:09,516 --> 00:29:14,488
また ユーザに通知の受信を
継続してもらうには―

481
00:29:14,588 --> 00:29:19,660
通知内のコンテンツを
関連性の高いものにすること

482
00:29:20,794 --> 00:29:25,532
また スレッド識別子を使い
通知をグループ化すること

483
00:29:25,632 --> 00:29:27,468
これをお勧めします

484
00:29:27,901 --> 00:29:31,071
ユーザがリストを
整理しやすくなり―

485
00:29:31,171 --> 00:29:36,176
アプリケーションの通知に
圧倒されないようになります

486
00:29:37,945 --> 00:29:42,649
また さまざまな通知を
アプリケーションは送信します

487
00:29:42,750 --> 00:29:46,720
カスタム設定ビューを
アプリケーション内で提供すれば

488
00:29:47,387 --> 00:29:49,656
ユーザは
どれが重要な通知か―

489
00:29:49,756 --> 00:29:52,860
より細かく
コントロールできます

490
00:29:54,228 --> 00:29:56,597
以上が通知管理です

491
00:29:57,531 --> 00:30:02,202
次にお話ししたい
重要な機能は“仮許可”です

492
00:29:57,531 --> 00:30:02,202
次にお話ししたい
重要な機能は“仮許可”です

493
00:30:04,137 --> 00:30:07,841
今はアプリケーションを
インストールすると―

494
00:30:07,941 --> 00:30:10,043
通知を受信する前に―

495
00:30:10,144 --> 00:30:14,214
こういうプロンプトに
応答する必要があります

496
00:30:14,748 --> 00:30:17,284
その通知が必要かどうか
聞かれます

497
00:30:17,451 --> 00:30:20,120
これに関する
最大の問題は―

498
00:30:20,220 --> 00:30:22,923
この時点では
どんな通知が来るか―

499
00:30:23,023 --> 00:30:25,659
ユーザが分からないことです

500
00:30:25,759 --> 00:30:28,395
必要な通知なのか
分かりません

501
00:30:28,762 --> 00:30:33,767
そこで iOS 12では
仮許可を導入します

502
00:30:33,867 --> 00:30:39,139
アプリケーションからの
通知の自動トライアルで

503
00:30:39,239 --> 00:30:42,676
ユーザは
その通知が必要かどうか―

504
00:30:42,776 --> 00:30:45,746
情報に基づいた判断が
できます

505
00:30:46,346 --> 00:30:49,082
これを選んだ場合は―

506
00:30:50,217 --> 00:30:53,620
先ほどの許可プロンプトは
なくなり―

507
00:30:53,720 --> 00:30:58,192
アプリケーションからの
通知は自動配信されます

508
00:30:58,425 --> 00:31:02,963
ただし これらの通知は
目立たない形で配信されます

509
00:30:58,425 --> 00:31:02,963
ただし これらの通知は
目立たない形で配信されます

510
00:31:03,063 --> 00:31:07,434
そして 目立たない形で
配信される通知は―

511
00:31:07,534 --> 00:31:10,003
Notification Centerでのみ
表示され―

512
00:31:10,104 --> 00:31:12,072
サウンドを鳴らしません

513
00:31:15,909 --> 00:31:19,713
仮許可で配信される通知は
それ自体が―

514
00:31:19,813 --> 00:31:23,650
こういうプロンプトを
出します

515
00:31:25,052 --> 00:31:27,387
これによりユーザは―

516
00:31:27,855 --> 00:31:30,958
通知を何回か受信した後で
判断できます

517
00:31:31,058 --> 00:31:33,827
その通知の受信を継続するか

518
00:31:34,561 --> 00:31:37,664
それとも
その通知をオフにするか

519
00:31:38,899 --> 00:31:42,669
そして この
オフの確認シートには―

520
00:31:42,770 --> 00:31:47,040
カスタム設定のリンクも
提供していれば表示されます

521
00:31:49,443 --> 00:31:51,578
コードを見てみましょう

522
00:31:52,312 --> 00:31:56,016
通常の
requestAuthorizationの―

523
00:31:56,450 --> 00:31:59,753
要求している
オプションに―

524
00:31:59,853 --> 00:32:05,993
ドット修飾のオプション
“.provisional”を追加できます

525
00:31:59,853 --> 00:32:05,993
ドット修飾のオプション
“.provisional”を追加できます

526
00:32:06,093 --> 00:32:08,462
これを組み込むと―

527
00:32:09,963 --> 00:32:13,567
自動的に
トライアル参加となります

528
00:32:14,701 --> 00:32:17,237
ここで注意すべきは―

529
00:32:17,971 --> 00:32:23,210
.provisionalオプションは
他のオプションに追加するのです

530
00:32:23,510 --> 00:32:27,247
ユーザが通知の配信の
継続を決めた場合―

531
00:32:27,347 --> 00:32:29,683
配信の仕方を
知りたいからです

532
00:32:29,783 --> 00:32:32,753
バッジ表示か サウンドつきか
アラートか

533
00:32:34,454 --> 00:32:36,256
以上が仮許可です

534
00:32:36,356 --> 00:32:39,827
アプリケーションからの
通知の自動トライアルで

535
00:32:39,927 --> 00:32:42,930
ユーザは
その通知が必要かどうか―

536
00:32:43,030 --> 00:32:45,465
情報に基づいて判断できます

537
00:32:46,366 --> 00:32:51,171
また ユーザに通知の配信を
継続させるためには―

538
00:32:51,271 --> 00:32:56,276
通知のコンテンツを
関連性の高いものにすることが重要

539
00:32:57,110 --> 00:33:02,449
修飾子オプションとして
.provisionalを使い―

540
00:32:57,110 --> 00:33:02,449
修飾子オプションとして
.provisionalを使い―

541
00:33:02,549 --> 00:33:06,086
リクエストするオプションに
追加することも重要です

542
00:33:06,687 --> 00:33:09,690
以上が仮許可です

543
00:33:12,760 --> 00:33:16,063
最後にお話ししたい
重要な機能は―

544
00:33:16,163 --> 00:33:17,965
“重大な通知”

545
00:33:20,334 --> 00:33:24,505
会議中や重要なイベントの
参加中は―

546
00:33:24,605 --> 00:33:26,273
私の電話は こう

547
00:33:26,373 --> 00:33:29,376
“おやすみモード”に
しています

548
00:33:29,576 --> 00:33:32,079
少なくとも
通知音をオフにします

549
00:33:32,179 --> 00:33:35,949
通知が来ても
音は聞こえません

550
00:33:36,383 --> 00:33:40,020
通常は
これでいいのですが―

551
00:33:41,655 --> 00:33:44,825
こんな重要な通知にも
気づかないでしょう

552
00:33:45,492 --> 00:33:47,795
健康関連の通知です

553
00:33:47,895 --> 00:33:52,099
グルコースモニタからの
低血糖の警告で

554
00:33:52,432 --> 00:33:54,935
すぐに見たい通知です

555
00:33:55,736 --> 00:33:57,571
こういう仮定から―

556
00:33:57,671 --> 00:34:01,775
新しい種類の通知が必要だと
気づきました

557
00:33:57,671 --> 00:34:01,775
新しい種類の通知が必要だと
気づきました

558
00:34:02,109 --> 00:34:04,378
それが重大な通知です

559
00:34:05,746 --> 00:34:09,917
これは例えば
医療関連 健康関連の通知

560
00:34:10,583 --> 00:34:13,320
あるいは
ホームセキュリティ関連

561
00:34:14,188 --> 00:34:16,657
あるいは治安関連の通知

562
00:34:16,757 --> 00:34:18,792
そして重大な通知の鍵は―

563
00:34:20,094 --> 00:34:23,797
ユーザの即時対応が
求められることです

564
00:34:26,467 --> 00:34:28,469
重大な通知の動作では―

565
00:34:28,569 --> 00:34:32,272
おやすみモードも
通知音オフも無視され―

566
00:34:32,371 --> 00:34:34,475
サウンドが鳴ります

567
00:34:34,574 --> 00:34:36,844
カスタムサウンドも
鳴らせます

568
00:34:37,311 --> 00:34:40,547
ただ そうなると
非常にうるさいです

569
00:34:40,647 --> 00:34:42,916
そのため 重大な通知は―

570
00:34:43,016 --> 00:34:48,554
送れるアプリケーションを
限るべきと我々は考えます

571
00:34:49,523 --> 00:34:52,458
重大な通知を
送れるようになるには―

572
00:34:52,559 --> 00:34:54,795
資格の申請が必要です

573
00:34:54,962 --> 00:34:58,632
developer.apple.comで
申請できます

574
00:34:59,900 --> 00:35:02,135
重大な通知は
こういう感じです

575
00:34:59,900 --> 00:35:02,135
重大な通知は
こういう感じです

576
00:35:02,736 --> 00:35:06,306
重大であることを示す
固有アイコンが表示され―

577
00:35:06,540 --> 00:35:09,610
着信時に
サウンドも鳴らします

578
00:35:12,546 --> 00:35:17,084
通知設定に重大な通知専用の
セクションもあります

579
00:35:18,152 --> 00:35:20,053
ユーザは ここで―

580
00:35:20,154 --> 00:35:24,124
特定のアプリケーションに
重要な通知を許可し―

581
00:35:24,224 --> 00:35:27,728
それ以外の通知を
許可しないことを選べます

582
00:35:30,264 --> 00:35:33,233
ユーザは重大な通知を
受信する前に―

583
00:35:33,333 --> 00:35:36,470
こういうプロンプトに
応答せねばなりません

584
00:35:36,570 --> 00:35:40,607
そのアプリケーションからの
重大な通知を―

585
00:35:40,708 --> 00:35:42,476
受信するか聞かれます

586
00:35:43,410 --> 00:35:48,982
当然 重大な通知を送るには
許可のリクエストが必要です

587
00:35:49,083 --> 00:35:51,952
資格を申請し
認められたら―

588
00:35:52,853 --> 00:35:55,722
通常のrequestAuthorizationの
場所の―

589
00:35:56,356 --> 00:36:00,561
他の
リクエストオプションに―

590
00:35:56,356 --> 00:36:00,561
他の
リクエストオプションに―

591
00:36:00,661 --> 00:36:04,498
.criticalAlertオプションを
追加できます

592
00:36:04,965 --> 00:36:08,102
これでプロンプトが
表示されます

593
00:36:12,906 --> 00:36:15,809
設定の仕方を見てみましょう

594
00:36:15,943 --> 00:36:19,813
その動作は普通の通知と
ほぼ同じです

595
00:36:20,180 --> 00:36:25,185
title body categoryIdentifierの
設定をしたところです

596
00:36:25,285 --> 00:36:29,356
重大な通知の違いは
サウンドを鳴らすこと

597
00:36:29,456 --> 00:36:32,526
サウンドを設定する必要が
あります

598
00:36:32,693 --> 00:36:34,895
ここでは ご覧のとおり―

599
00:36:34,995 --> 00:36:40,033
フレームワークが提供する
デフォルトのサウンドを設定

600
00:36:41,902 --> 00:36:44,204
カスタムサウンドの
設定も―

601
00:36:44,605 --> 00:36:48,308
音量レベルのカスタマイズも
可能です

602
00:36:48,942 --> 00:36:50,410
そして もちろん―

603
00:36:52,146 --> 00:36:55,115
重大な通知はプッシュ通知にも
なりうるので―

604
00:36:55,215 --> 00:36:56,950
この情報はすべて―

605
00:36:57,051 --> 00:37:00,187
プッシュペイロードにも
設定できます

606
00:36:57,051 --> 00:37:00,187
プッシュペイロードにも
設定できます

607
00:37:00,921 --> 00:37:03,156
以上が重大な通知です

608
00:37:03,257 --> 00:37:06,260
新しい種類の通知であり―

609
00:37:06,427 --> 00:37:09,863
即時対応をユーザに求めます

610
00:37:10,264 --> 00:37:12,299
そして非常にうるさい

611
00:37:12,399 --> 00:37:15,135
送信するには資格が必要です

612
00:37:18,605 --> 00:37:22,743
今日 ご紹介する
エキサイティングなAPIは以上です

613
00:37:22,843 --> 00:37:26,480
簡単に ひと通り
おさらいしたいと思います

614
00:37:29,016 --> 00:37:33,587
スレッド識別子を使って
通知をグループ化すれば―

615
00:37:33,687 --> 00:37:37,624
ユーザがリストを
整理しやすくなります

616
00:37:38,792 --> 00:37:43,497
通知コンテンツExtensionに関する
優れたAPIは―

617
00:37:43,597 --> 00:37:46,233
アプリケーションの
リッチ通知を―

618
00:37:46,333 --> 00:37:48,168
より対話的にできます

619
00:37:49,603 --> 00:37:53,807
アプリケーション内の
カスタム設定ビューにより

620
00:37:53,907 --> 00:37:56,777
どんな通知を受信したいか―

621
00:37:56,877 --> 00:38:00,647
ユーザが
細かくコントロールできます

622
00:37:56,877 --> 00:38:00,647
ユーザが
細かくコントロールできます

623
00:38:03,016 --> 00:38:05,452
仮許可も取り上げました

624
00:38:05,552 --> 00:38:09,389
アプリケーションからの
自動トライアルの通知で

625
00:38:09,490 --> 00:38:12,659
これらの通知が
必要かどうか―

626
00:38:12,760 --> 00:38:15,863
情報に基づいた判断を
ユーザは下せます

627
00:38:16,930 --> 00:38:19,333
そして最後は重大な通知

628
00:38:19,600 --> 00:38:22,102
新しい種類の通知で―

629
00:38:22,202 --> 00:38:25,372
ユーザは
即時対応を求められます

630
00:38:25,472 --> 00:38:27,141
そして うるさい

631
00:38:27,307 --> 00:38:30,944
これらの優れたAPIを
ぜひ活用して―

632
00:38:31,044 --> 00:38:34,882
ユーザの通知体験を
向上させてください

633
00:38:35,449 --> 00:38:37,451
このセッションの情報は
すべて―

634
00:38:37,551 --> 00:38:40,854
developer.apple.comの
セッションのページで見られます

635
00:38:40,954 --> 00:38:42,689
セッション710です

636
00:38:43,290 --> 00:38:46,727
この後 ホール３で
別のセッションがあります

637
00:38:46,827 --> 00:38:49,263
“グループ通知の
使い方について”

638
00:38:49,363 --> 00:38:54,134
最適なグループ通知の
決め方をご説明します

639
00:38:54,601 --> 00:38:58,272
通知ラボが
今日と明日の２回 あります

640
00:38:58,372 --> 00:39:03,177
我々のチームの技術者が
あらゆるご質問にお答えします

641
00:38:58,372 --> 00:39:03,177
我々のチームの技術者が
あらゆるご質問にお答えします

642
00:39:03,277 --> 00:39:04,945
金曜日の午前には―

643
00:39:05,045 --> 00:39:08,382
通知のデザインという
面白いセッションが

644
00:39:08,549 --> 00:39:12,953
これらのデザインを一緒に考えた
デザイナーが主催し―

645
00:39:13,053 --> 00:39:17,191
通知のベストプラクティスに
ついて語ります

646
00:39:17,357 --> 00:39:19,059
ありがとうございました

647
00:39:19,159 --> 00:39:22,596
(拍手)