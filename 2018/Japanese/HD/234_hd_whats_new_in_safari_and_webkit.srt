
1
00:00:07,040 --> 00:00:15,582
(音楽)

2
00:00:21,088 --> 00:00:24,958
(拍手)

3
00:00:25,058 --> 00:00:28,395
皆さん　こんにちは

4
00:00:29,463 --> 00:00:30,898
どうも

5
00:00:30,998 --> 00:00:33,200
楽しんでいますか？

6
00:00:33,300 --> 00:00:36,436
次々と新発表が飛び出すので

7
00:00:36,537 --> 00:00:38,972
ワクワクしますよね

8
00:00:39,072 --> 00:00:41,208
私はシュローカ･キニ

9
00:00:41,308 --> 00:00:44,811
Developer Publicationsで
働いています

10
00:00:45,212 --> 00:00:50,284
つまり私はコード以外に
文章も書けるんです

11
00:00:50,551 --> 00:00:52,319
(笑い声)

12
00:00:52,419 --> 00:00:57,157
デベロッパの助けとなる
ドキュメントを作っています

13
00:00:57,357 --> 00:01:01,795
今日はSafariとWebKitについて
お話しします

14
00:00:57,357 --> 00:01:01,795
今日はSafariとWebKitについて
お話しします

15
00:01:01,895 --> 00:01:06,133
最新のSafariで
最新技術を使いたいという―

16
00:01:06,233 --> 00:01:09,570
Webデベロッパは
よく聞いてくださいね

17
00:01:09,770 --> 00:01:14,474
Webビューや機能拡張を
使用する方にも―

18
00:01:14,575 --> 00:01:16,210
耳よりな話です

19
00:01:16,310 --> 00:01:19,713
他分野の方も ぜひ聞いてください

20
00:01:19,813 --> 00:01:25,118
新機能で より快適な
ブラウジングを楽しめますよ

21
00:01:26,119 --> 00:01:29,489
前回の発表から さらに―

22
00:01:29,590 --> 00:01:31,692
大きく向上しています

23
00:01:31,792 --> 00:01:36,763
今回は最新技術による安全で
高機能なアプリケーションを

24
00:01:36,864 --> 00:01:40,200
いくつかご紹介しましょう

25
00:01:40,300 --> 00:01:42,236
多くが無料ですよ

26
00:01:42,336 --> 00:01:47,040
ではセキュリティに関する発表から
始めましょう

27
00:01:49,376 --> 00:01:51,812
WKWebViewです

28
00:01:52,346 --> 00:01:56,083
“WKWebViewなら
2014年からある”と―

29
00:01:56,183 --> 00:01:58,552
思われたでしょう

30
00:01:58,652 --> 00:02:00,921
ですが改めて紹介します

31
00:01:58,652 --> 00:02:00,921
ですが改めて紹介します

32
00:02:01,021 --> 00:02:04,925
UIWebViewは
非推奨になるからです

33
00:02:05,025 --> 00:02:09,530
(拍手)

34
00:02:09,630 --> 00:02:13,800
Webコンテンツの
ネイティブ環境での表示が

35
00:02:13,901 --> 00:02:18,805
難しい時などに
WKWebViewがお勧めです

36
00:02:18,906 --> 00:02:23,277
UIWebViewを知っていれば
切り替えも簡単ですし

37
00:02:23,377 --> 00:02:28,415
macOSでもiOSでも
開発時間が減らせます

38
00:02:28,515 --> 00:02:32,019
WKWebViewは
どちらでも使えるからです

39
00:02:32,119 --> 00:02:35,756
UIWebViewや
Webビューとは違い―

40
00:02:35,856 --> 00:02:39,193
両方でコードを共有できるのです

41
00:02:39,793 --> 00:02:44,464
さらにWKWebViewは
独立しているため―

42
00:02:44,565 --> 00:02:50,571
Web処理に問題があっても
アプリケーションに影響しません

43
00:02:50,671 --> 00:02:56,210
重いWebコンテンツで
処理が遅れることもないのです

44
00:02:56,310 --> 00:02:59,413
たとえWKWebViewが故障しても―

45
00:02:59,580 --> 00:03:02,916
アプリケーションに
被害は及びません

46
00:02:59,580 --> 00:03:02,916
アプリケーションに
被害は及びません

47
00:03:03,016 --> 00:03:09,156
WKWebViewは高い安全と
性能を提供します

48
00:03:09,256 --> 00:03:15,229
たとえ面倒でもWKWebViewに
替える価値があるのです

49
00:03:16,897 --> 00:03:19,967
次は機能拡張に関する発表です

50
00:03:20,067 --> 00:03:22,402
Safariの機能は―

51
00:03:22,803 --> 00:03:26,206
この数年で大きく進化しました

52
00:03:26,306 --> 00:03:31,378
Safari Extensionの歴史を
振り返ってみましょう

53
00:03:32,012 --> 00:03:36,817
アプリケーションの拡張という
概念がない2010年に―

54
00:03:36,917 --> 00:03:39,953
Legacy Safari Extensionを発表

55
00:03:40,053 --> 00:03:45,058
Safari Extension Builderで
.safariextzファイルを作り

56
00:03:45,158 --> 00:03:47,961
Safari Extensions Gallery経由で

57
00:03:48,061 --> 00:03:51,598
拡張機能を公開していました

58
00:03:51,865 --> 00:03:58,138
Legacy Extensionは
閲覧データにアクセスできたため

59
00:03:58,372 --> 00:04:02,009
詐欺などで悪用されてしまいます

60
00:03:58,372 --> 00:04:02,009
詐欺などで悪用されてしまいます

61
00:04:02,109 --> 00:04:07,514
これらから守るのに
手を打つ必要がありました

62
00:04:07,614 --> 00:04:11,552
そして2014年が
新たな節目となります

63
00:04:11,652 --> 00:04:16,156
macOSとiOS向けの
アプリケーション拡張を発表

64
00:04:16,255 --> 00:04:18,458
App Extensionは―

65
00:04:18,559 --> 00:04:22,129
Safariではなく
アプリケーション拡張です

66
00:04:22,229 --> 00:04:27,201
しかし これが
大きな変化を生みました

67
00:04:27,434 --> 00:04:32,139
他のアプリケーションに
機能が拡張できる上に―

68
00:04:32,239 --> 00:04:35,042
Xcodeで作成できるのです

69
00:04:35,142 --> 00:04:37,177
そこで私たちは―

70
00:04:37,277 --> 00:04:42,850
この優れた概念をSafariに
適用しようと考えます

71
00:04:42,950 --> 00:04:46,286
当時はアドブロッカーが人気で

72
00:04:46,386 --> 00:04:50,824
2015年にContent Blockerを導入

73
00:04:50,924 --> 00:04:54,361
Xcodeで作成できる
App Extensionで

74
00:04:54,461 --> 00:04:56,864
macOSとiOSで使えます

75
00:04:56,964 --> 00:04:59,500
特別な構造で高速化を実現

76
00:04:59,600 --> 00:05:05,038
Legacy Safari Extensionより
速くブロックします

77
00:04:59,600 --> 00:05:05,038
Legacy Safari Extensionより
速くブロックします

78
00:05:05,339 --> 00:05:08,575
閲覧速度に影響することはないし

79
00:05:08,675 --> 00:05:12,880
閲覧履歴にアクセスしないので
安全です

80
00:05:13,180 --> 00:05:17,317
App Extensionの利点は多く

81
00:05:17,417 --> 00:05:21,989
すべてSafari Extensionに
取り入れようと考えました

82
00:05:22,089 --> 00:05:24,625
そうすれば双方を生かせます

83
00:05:24,791 --> 00:05:27,961
Safariの機能拡張に加え―

84
00:05:28,061 --> 00:05:31,665
アプリケーションも拡張します

85
00:05:31,765 --> 00:05:33,367
そして2016年―

86
00:05:33,467 --> 00:05:37,237
macOSにSafari
App Extensionが登場

87
00:05:37,337 --> 00:05:40,507
Xcodeで作成できる
Safariの拡張機能です

88
00:05:40,607 --> 00:05:46,613
App Storeで無料または
有料で出品できるので―

89
00:05:46,713 --> 00:05:49,650
請求処理の心配も要りません

90
00:05:50,250 --> 00:05:53,854
2010年のLegacy
Extensionと比べて―

91
00:05:53,954 --> 00:05:57,257
Safari App Extensionは
とても便利です

92
00:05:57,357 --> 00:06:01,528
Legacy Safari Extensionを
お持ちなら―

93
00:05:57,357 --> 00:06:01,528
Legacy Safari Extensionを
お持ちなら―

94
00:06:01,628 --> 00:06:03,630
ぜひ切り替えてください

95
00:06:03,730 --> 00:06:07,634
アドブロッカーも
Content Blockerへ

96
00:06:07,835 --> 00:06:09,570
それでは―

97
00:06:09,670 --> 00:06:14,241
Legacy Safari Extensionの
悪用対策は？

98
00:06:15,142 --> 00:06:20,447
Safari 12から
Legacy Extensionは―

99
00:06:20,547 --> 00:06:24,184
Gallery外ではサポートされません

100
00:06:24,551 --> 00:06:30,224
Galleryで提供されるものは
まだ使えます

101
00:06:30,958 --> 00:06:35,095
非推奨の canload APIを使う
拡張は例外で

102
00:06:35,195 --> 00:06:37,231
デフォルトで無効となります

103
00:06:37,331 --> 00:06:42,236
Galleryへの提出は
2018年末まで可能です

104
00:06:42,336 --> 00:06:45,906
しかし翌年には さらに新しくなり

105
00:06:46,006 --> 00:06:50,277
いずれはSafari App
Extensionに完全移行します

106
00:06:50,377 --> 00:06:54,815
この２つの機能拡張モデルの
開発方法は―

107
00:06:54,915 --> 00:06:57,851
ドキュメントをご覧ください

108
00:06:57,951 --> 00:07:00,821
Developer Publicationsが
掲載しています

109
00:06:57,951 --> 00:07:00,821
Developer Publicationsが
掲載しています

110
00:07:01,788 --> 00:07:04,458
(拍手)

111
00:07:07,794 --> 00:07:10,764
ここまでWebビューと―

112
00:07:10,864 --> 00:07:14,067
機能拡張について発表を行いました

113
00:07:14,168 --> 00:07:18,105
以降は主にWeb開発に
関わる説明です

114
00:07:18,205 --> 00:07:20,807
まずはSubresource
Integrityです

115
00:07:21,542 --> 00:07:26,914
デベロッパがコンテンツを
HTTPSで提供した場合―

116
00:07:27,014 --> 00:07:32,686
第三者サーバからのコンテンツが
含まれる可能性があります

117
00:07:32,786 --> 00:07:35,389
例えばCDNサーバです

118
00:07:35,489 --> 00:07:39,593
双方がHTTPS通信なら
安全かも知れません

119
00:07:39,693 --> 00:07:42,896
データの機密性や整合性を―

120
00:07:42,996 --> 00:07:45,632
確保できるからです

121
00:07:45,732 --> 00:07:50,838
しかし第三者が感染していたら
どうなるでしょう？

122
00:07:50,938 --> 00:07:52,072
あり得る話です

123
00:07:52,172 --> 00:07:55,909
この場合 感染したサーバに対して

124
00:07:56,009 --> 00:07:59,313
HTTPSは安全を確保できません

125
00:07:59,413 --> 00:08:02,749
そのため
改ざんされたスクリプトが

126
00:07:59,413 --> 00:08:02,749
そのため
改ざんされたスクリプトが

127
00:08:02,850 --> 00:08:05,686
提供される危険があります

128
00:08:06,019 --> 00:08:11,225
Subresource Integrityは
これを防ぎます

129
00:08:11,325 --> 00:08:14,027
方法はハッシュ化です

130
00:08:14,127 --> 00:08:18,499
まずはScriptやLink要素に
Integrity属性を付与

131
00:08:18,699 --> 00:08:22,803
値はハッシュ関数を適用して
生成します

132
00:08:23,270 --> 00:08:26,874
読み込み時に
別のハッシュ値を計算

133
00:08:26,974 --> 00:08:31,612
２つが一致しなければ
スクリプトは実行されません

134
00:08:31,712 --> 00:08:36,216
こうして改ざんファイルの
読み込みを防ぎます

135
00:08:36,316 --> 00:08:39,720
ハッシュ値が一致しない限り―

136
00:08:40,020 --> 00:08:42,054
実行されないのです

137
00:08:42,322 --> 00:08:48,662
機能を失わないよう
フォールバックを追加しておけば

138
00:08:48,762 --> 00:08:52,399
リソースを再ロードできます

139
00:08:54,368 --> 00:08:58,972
これで悪意あるファイルから
ユーザを守れます

140
00:08:59,072 --> 00:09:03,076
そしてITPはユーザの
プライバシーを保護します

141
00:08:59,072 --> 00:09:03,076
そしてITPはユーザの
プライバシーを保護します

142
00:09:03,177 --> 00:09:06,680
正式名はIntelligent
Tracking Preventionです

143
00:09:06,880 --> 00:09:09,983
ユーザ追跡を減らす
Safariの機能で

144
00:09:10,083 --> 00:09:14,288
Cookieやサイトデータを
制限するものです

145
00:09:14,388 --> 00:09:18,192
Cookieの保存には
２つ条件があります

146
00:09:18,292 --> 00:09:22,429
外部サイトがCookieを
利用できるのは―

147
00:09:22,529 --> 00:09:25,799
ユーザのサイト訪問から24時間

148
00:09:25,899 --> 00:09:30,671
そして最初の24時間を含め
30日間のみ―

149
00:09:30,771 --> 00:09:34,775
Cookieは独立ストレージに
保存されます

150
00:09:34,875 --> 00:09:38,512
ですが今回 制限を厳しくしました

151
00:09:38,779 --> 00:09:44,451
24時間のCookie利用期間は
撤廃されます

152
00:09:45,219 --> 00:09:49,423
しかし独立ストレージには
保存されます

153
00:09:49,623 --> 00:09:53,794
デベロッパにとって
外部埋め込み機能は―

154
00:09:53,894 --> 00:09:57,364
ワークフローに重要なものです

155
00:09:57,464 --> 00:10:01,068
では どうするかと言うと―

156
00:09:57,464 --> 00:10:01,068
では どうするかと言うと―

157
00:10:01,535 --> 00:10:04,972
Storage Access APIを使います

158
00:10:06,507 --> 00:10:09,676
外部埋め込み機能が―

159
00:10:09,776 --> 00:10:17,217
当事者Cookieにアクセスするには
許可が必要です

160
00:10:17,317 --> 00:10:21,221
許可がない場合
プロンプトが表示され―

161
00:10:21,321 --> 00:10:26,894
Cookieへのアクセス可否を
ユーザに問い合わせます

162
00:10:27,427 --> 00:10:31,498
アクセスの判断を委ねることで―

163
00:10:31,598 --> 00:10:36,670
ユーザがCookieを
管理できるようになるのです

164
00:10:36,770 --> 00:10:42,042
これでプライバシーを守りながら
ブラウジングできます

165
00:10:44,011 --> 00:10:47,915
次はAutomatic Strong
Passwordsです

166
00:10:48,015 --> 00:10:51,818
他のセッションでも
ご覧になりましたよね

167
00:10:51,919 --> 00:10:54,288
この機能は最高ですよ

168
00:10:54,388 --> 00:10:57,524
アカウントを登録するのに

169
00:10:57,624 --> 00:11:00,828
常に強力なパスワードを
設定できます

170
00:10:57,624 --> 00:11:00,828
常に強力なパスワードを
設定できます

171
00:11:00,928 --> 00:11:02,796
これは便利です

172
00:11:02,896 --> 00:11:06,233
パスワード管理については

173
00:11:06,333 --> 00:11:08,402
私も実は苦手です

174
00:11:08,502 --> 00:11:13,707
それほど強固ではなく
他で使ってる場合もあります

175
00:11:14,141 --> 00:11:17,110
この機能に手間はかかりません

176
00:11:17,211 --> 00:11:21,315
ログイン画面に行けば
ヒューリスティックが決定します

177
00:11:21,415 --> 00:11:26,019
ですが機能させるには
入力フィールドに―

178
00:11:26,119 --> 00:11:30,157
autocomplete属性を
追加してください

179
00:11:31,258 --> 00:11:35,229
パスワードは長さが20文字で―

180
00:11:35,362 --> 00:11:40,100
大文字 小文字 数字
ハイフンを含みます

181
00:11:40,200 --> 00:11:45,639
この機能を どのサービスにも
適合させるには―

182
00:11:45,739 --> 00:11:49,943
パスワードに条件が必要です

183
00:11:50,043 --> 00:11:57,050
そこでpasswordrules属性を使用し
パスワード要件を追加します

184
00:11:57,151 --> 00:12:00,187
デベロッパWebサイトに
ValidationToolがあります

185
00:11:57,151 --> 00:12:00,187
デベロッパWebサイトに
ValidationToolがあります

186
00:12:00,287 --> 00:12:03,891
これで互換性テストができますし

187
00:12:03,991 --> 00:12:07,394
独自のパスワードルールが
開発できます

188
00:12:08,595 --> 00:12:13,267
Security Code AutoFillも
先日 紹介しましたね

189
00:12:13,367 --> 00:12:18,005
多くの人が無料で得られる
便利な機能です

190
00:12:18,105 --> 00:12:20,874
面倒だと思うんですよ

191
00:12:20,974 --> 00:12:23,577
アプリケーションと
メールを行き来して

192
00:12:23,677 --> 00:12:27,214
認証コードを覚えて
入力するなんて

193
00:12:27,314 --> 00:12:29,249
でもSafariが―

194
00:12:29,349 --> 00:12:33,153
認証コードを
入力候補に出してくれたら？

195
00:12:33,253 --> 00:12:36,123
とても楽ですよね

196
00:12:36,390 --> 00:12:41,195
これもヒューリスティックを
使うので無料です

197
00:12:41,295 --> 00:12:46,233
しっかり機能させ
入力候補を出すためには

198
00:12:46,633 --> 00:12:52,039
autocomplete属性に
one-time-codeと設定します

199
00:12:52,139 --> 00:12:54,641
詳細についてはオンラインで―

200
00:12:54,741 --> 00:12:59,012
Security Code AutoFillの
セッションをご覧ください

201
00:13:00,914 --> 00:13:02,349
以上がセキュリティです

202
00:13:02,449 --> 00:13:04,384
WKWebViewに切り替え

203
00:13:04,484 --> 00:13:07,387
Content Blockerと
Safari App Extensionに移行

204
00:13:07,487 --> 00:13:13,360
改ざんファイルを提供しない
Subresource Integrity

205
00:13:13,460 --> 00:13:17,431
ITPはStorage Access APIで
プライバシーを確保

206
00:13:18,098 --> 00:13:22,836
Automatic Strong Passwordsと
Security Code AutoFillは

207
00:13:22,936 --> 00:13:25,672
安全で便利な機能です

208
00:13:27,274 --> 00:13:29,109
ここまで大丈夫ですか？

209
00:13:30,644 --> 00:13:34,014
次はパフォーマンスに関する
機能です

210
00:13:34,114 --> 00:13:36,617
まずはFont Collection

211
00:13:36,717 --> 00:13:39,620
冒頭でも言いましたが―

212
00:13:39,720 --> 00:13:42,523
私の名前はシュローカ･キニ

213
00:13:42,623 --> 00:13:44,758
英語の名前ではありません

214
00:13:46,460 --> 00:13:51,732
デーヴァナーガリー文字では
こうなります

215
00:13:51,832 --> 00:13:56,603
フォントは様々ですが
文字はすべて同じです

216
00:13:56,703 --> 00:14:01,441
今年はWOFF2とTrueType
コレクションをサポート

217
00:13:56,703 --> 00:14:01,441
今年はWOFF2とTrueType
コレクションをサポート

218
00:14:01,542 --> 00:14:05,078
同類フォントを
１コレクションにすれば

219
00:14:05,179 --> 00:14:08,482
複製テーブルを
文字コード表から省けます

220
00:14:08,582 --> 00:14:11,652
例えばビルトインフォントの
PingFangは―

221
00:14:11,752 --> 00:14:16,657
コレクションを使えば
ファイルを84％縮小できます

222
00:14:16,757 --> 00:14:20,594
なぜなら
同じ文字セットのフォントは

223
00:14:20,694 --> 00:14:24,531
テーブルを共有しているからです

224
00:14:26,300 --> 00:14:30,904
次の機能Font-Displayは
変更が不要です

225
00:14:31,004 --> 00:14:34,942
Webコンテンツで
カスタムフォントを使用し

226
00:14:35,042 --> 00:14:38,111
表示されなかったとします

227
00:14:38,278 --> 00:14:43,717
すると フォントの表示まで
プレースホルダを使い―

228
00:14:43,817 --> 00:14:48,889
画面上のコンテンツの位置が
保たれます

229
00:14:49,823 --> 00:14:54,895
しかし この設定をやめて
自分で調整したい場合は

230
00:14:54,995 --> 00:14:59,600
Font-Displayディスクリプタを
使用します

231
00:14:59,700 --> 00:15:03,136
別の値を使って
他のフォントや―

232
00:14:59,700 --> 00:15:03,136
別の値を使って
他のフォントや―

233
00:15:03,237 --> 00:15:07,007
キャッシュのフォントを
指定したりできます

234
00:15:09,510 --> 00:15:15,148
動画のパフォーマンス向上には
ビデオを使います

235
00:15:15,249 --> 00:15:20,487
私は この爆発の壁紙が
気に入っています

236
00:15:20,587 --> 00:15:24,358
カッコいいのですが静止画です

237
00:15:25,259 --> 00:15:28,295
本当は“バーン！”と出てほしい

238
00:15:28,395 --> 00:15:31,465
動きのあるGIFなら完璧です

239
00:15:31,798 --> 00:15:35,802
しかし読み込みが遅く
バッテリーを消費します

240
00:15:35,903 --> 00:15:40,274
それにビデオより
パフォーマンスが落ちます

241
00:15:42,075 --> 00:15:46,146
Safariにおいてmp4は
img要素でサポート

242
00:15:46,246 --> 00:15:50,651
再生にはビルトインの
ハードウェアデコードを使います

243
00:15:50,784 --> 00:15:54,655
読み込みは速く
バッテリーの消費も削減

244
00:15:54,755 --> 00:15:59,960
CSSの背景プロパティでも
mp4を使えます

245
00:16:00,461 --> 00:16:04,231
この技術は簡単に導入できます

246
00:16:04,398 --> 00:16:08,535
古いブラウザに非対応の
バージョンにもです

247
00:16:08,635 --> 00:16:11,438
古いブラウザはmp4に対応しません

248
00:16:11,538 --> 00:16:14,808
しかし便利なことに
既存の技術で―

249
00:16:14,908 --> 00:16:20,914
フォールバック画像を表示するよう
指定できるのです

250
00:16:22,249 --> 00:16:27,087
続いてイベントリスナーに
移りましょう

251
00:16:27,187 --> 00:16:28,422
いいですか？

252
00:16:28,622 --> 00:16:34,061
優れたデフォルト機能と
カスタマイズ性を持っています

253
00:16:34,461 --> 00:16:37,464
タッチスクリーンの操作は―

254
00:16:37,564 --> 00:16:39,299
スクロールをします

255
00:16:39,399 --> 00:16:43,337
その度にタッチイベントが発生

256
00:16:43,704 --> 00:16:48,208
これによりスクロールが
妨害されてしまいます

257
00:16:48,442 --> 00:16:50,677
例をご覧ください

258
00:16:51,745 --> 00:16:56,483
左の方が右よりも
妨害されていますね

259
00:16:56,583 --> 00:16:58,185
ほぼ停止してます

260
00:16:58,418 --> 00:17:02,422
では右は何が違うのでしょうか

261
00:16:58,418 --> 00:17:02,422
では右は何が違うのでしょうか

262
00:17:02,689 --> 00:17:04,858
Passive Event Listenerです

263
00:17:04,958 --> 00:17:09,863
これは documentやwindow
bodyの要素で有効になります

264
00:17:09,963 --> 00:17:15,135
そしてタッチイベントが
ブラウザに指示します

265
00:17:15,234 --> 00:17:19,573
“妨害を受けず
スクロールを続行せよ”と

266
00:17:19,673 --> 00:17:24,044
追加要素をPassiveにしたい場合は

267
00:17:24,144 --> 00:17:28,549
Passiveプロパティを
Trueに指定します

268
00:17:28,715 --> 00:17:32,152
このフラグの指示によって―

269
00:17:32,252 --> 00:17:36,723
ブラウザはイベント処理の完了を
待ちません

270
00:17:36,823 --> 00:17:40,794
これで滑らかに
スクロールできるのです

271
00:17:42,729 --> 00:17:47,501
次はAsync Image Decodingの
非同期呼び出しです

272
00:17:47,668 --> 00:17:50,370
通常 画像のデコードは同期的です

273
00:17:50,470 --> 00:17:52,272
メインスレッドをブロックし

274
00:17:52,372 --> 00:17:55,809
すべての画像を読み込んで
表示します

275
00:17:56,109 --> 00:17:59,680
これではユーザとの対話も
遮断されます

276
00:17:59,780 --> 00:18:04,885
しかし非同期デコードなら
スレッドを並行処理するので

277
00:17:59,780 --> 00:18:04,885
しかし非同期デコードなら
スレッドを並行処理するので

278
00:18:04,985 --> 00:18:07,955
対話はブロックされません

279
00:18:08,188 --> 00:18:14,795
非同期呼び出しは
デフォルトで１ページ目から機能し

280
00:18:15,028 --> 00:18:18,065
大抵のWebコンテンツを
カバーします

281
00:18:18,899 --> 00:18:21,435
しかし特殊なケースも
あり得ます

282
00:18:21,535 --> 00:18:27,474
Webページにタイルマップがあれば
読み込みにズレが生じます

283
00:18:27,574 --> 00:18:33,413
画像が多ければタイルの表示が
遅れるかも知れません

284
00:18:34,248 --> 00:18:38,185
そしてアプリケーションの
スライドショー

285
00:18:38,285 --> 00:18:40,921
スライドをフェードインさせるのに

286
00:18:41,021 --> 00:18:45,425
同期デコードでは
間に合わないかも知れません

287
00:18:46,994 --> 00:18:49,863
それで 突然切り替わる

288
00:18:50,764 --> 00:18:55,903
でも非同期デコードなら
きれいにフェードインします

289
00:18:56,770 --> 00:19:01,241
こうしたケースでは
２つの対処法があります

290
00:18:56,770 --> 00:19:01,241
こうしたケースでは
２つの対処法があります

291
00:19:01,341 --> 00:19:06,547
１つはimg要素に
decoding属性を追加する

292
00:19:06,647 --> 00:19:09,583
もう１つはJavaScript APIの―

293
00:19:09,683 --> 00:19:14,154
HTMLImageElement.decode
メソッドを使います

294
00:19:14,254 --> 00:19:17,624
これがpromiseを返し―

295
00:19:17,724 --> 00:19:21,228
DOMへの追加タイミングを
知らせます

296
00:19:22,496 --> 00:19:25,399
そして非同期呼び出しの継続は

297
00:19:25,499 --> 00:19:28,035
Beacon APIをサポートします

298
00:19:28,168 --> 00:19:34,274
通常はunloadイベントに
データを送ろうとした場合―

299
00:19:34,374 --> 00:19:37,611
非同期リクエストは無視されます

300
00:19:37,711 --> 00:19:42,349
そのため読み込みの遅い
同期リクエストを使います

301
00:19:42,683 --> 00:19:45,419
でも今はBeacon APIがあります

302
00:19:45,519 --> 00:19:51,225
Safariが起動していれば
データをサーバに送るだけです

303
00:19:51,325 --> 00:19:54,061
間違いなく届きます

304
00:19:56,063 --> 00:20:01,368
たくさん話しましたが
実際に機能を見たいですよね

305
00:19:56,063 --> 00:20:01,368
たくさん話しましたが
実際に機能を見たいですよね

306
00:20:01,468 --> 00:20:05,272
これよりジェーソンに
実演してもらいます

307
00:20:05,372 --> 00:20:06,306
よろしく

308
00:20:06,406 --> 00:20:11,278
(拍手)

309
00:20:11,378 --> 00:20:12,179
どうも

310
00:20:12,279 --> 00:20:16,049
デベロッパの
ジェーソン･サンドマイヤーです

311
00:20:16,316 --> 00:20:21,255
僕は工芸が好きで休日に
バードハウスを作ってます

312
00:20:21,355 --> 00:20:26,026
最近 作品を紹介するのに
ブログを始めました

313
00:20:26,126 --> 00:20:31,765
自分でフォントや色も選び
仕上がりに満足しています

314
00:20:32,065 --> 00:20:34,334
このデザインもですが―

315
00:20:34,434 --> 00:20:39,807
ユーザに優れた機能を提供できて
誇らしく思います

316
00:20:39,907 --> 00:20:45,245
WebKitとSafariの新たな機能を

317
00:20:45,345 --> 00:20:48,215
ブログにも活用してみます

318
00:20:48,582 --> 00:20:50,918
とても簡単ですよ

319
00:20:51,952 --> 00:20:55,022
MacBook Proでサイトを開きます

320
00:20:56,924 --> 00:20:58,358
そして…　おっと

321
00:20:58,458 --> 00:21:00,561
ちょっと 何したの？

322
00:20:58,458 --> 00:21:00,561
ちょっと 何したの？

323
00:21:02,563 --> 00:21:05,866
上品なブログじゃなくなったな

324
00:21:07,401 --> 00:21:09,336
正しいURLなのに…

325
00:21:10,904 --> 00:21:13,006
原因はきっとこうだ

326
00:21:14,241 --> 00:21:17,077
このサイトを始めた時―

327
00:21:17,578 --> 00:21:22,716
友人にブロゴスフィアは
危険だと言われました

328
00:21:24,751 --> 00:21:27,588
これは破壊工作ですよ

329
00:21:27,688 --> 00:21:31,825
スタイルシートを
誰かに替えられました

330
00:21:31,925 --> 00:21:34,761
でもバックアップがあります

331
00:21:34,862 --> 00:21:39,333
さらにSubresource
Integrityの機能で

332
00:21:39,433 --> 00:21:41,535
今後の安全を確保します

333
00:21:46,273 --> 00:21:52,312
まずは新しいintegrity属性を
linkタグに追加

334
00:21:52,412 --> 00:21:54,648
スクリプトにも使えますが―

335
00:21:54,748 --> 00:21:59,286
まだ変更を加えるので
追加は後にします

336
00:22:00,721 --> 00:22:05,959
この属性の値は
ハッシュアルゴリズムで―

337
00:22:06,059 --> 00:22:11,598
表示するファイルの
チェックサムを生成したものです

338
00:22:12,699 --> 00:22:16,270
すでにSHA-256ハッシュを
用意してます

339
00:22:16,770 --> 00:22:18,806
次がハイフン

340
00:22:19,206 --> 00:22:23,243
そしてハッシュ値を表すBase64

341
00:22:24,011 --> 00:22:25,546
これを保存します

342
00:22:25,679 --> 00:22:28,782
そしてページをリロード

343
00:22:29,683 --> 00:22:31,652
スタイルがありません

344
00:22:31,752 --> 00:22:36,390
ファイルとHTMLのハッシュ値が
一致しないので―

345
00:22:36,490 --> 00:22:39,493
Safariがブロックしました

346
00:22:42,229 --> 00:22:44,198
CDNに接続します

347
00:22:44,731 --> 00:22:47,534
デスクトップのバックアップです

348
00:22:48,168 --> 00:22:51,839
バックアップをCDNへドラッグし

349
00:22:52,272 --> 00:22:54,374
ファイルを置き換えます

350
00:22:55,209 --> 00:22:58,979
そしてリロードすれば元通りです

351
00:22:59,880 --> 00:23:02,483
(拍手)

352
00:22:59,880 --> 00:23:02,483
(拍手)

353
00:23:02,583 --> 00:23:03,650
どうも

354
00:23:04,117 --> 00:23:07,821
Subresource Integrityがあれば

355
00:23:07,921 --> 00:23:11,391
こうしてサイトを保護できます

356
00:23:12,759 --> 00:23:16,897
続いてパフォーマンスを
見てみましょう

357
00:23:17,998 --> 00:23:22,536
サイトの どのリンクが
クリックされたかが分かれば

358
00:23:22,636 --> 00:23:25,505
デザインに生かせます

359
00:23:29,209 --> 00:23:34,114
そこでクリックのデータを
確認できるよう―

360
00:23:34,214 --> 00:23:37,251
ハンドラを設定しておきます

361
00:23:40,921 --> 00:23:44,625
しかし他のページに飛ぶ
リンクを押すと

362
00:23:44,725 --> 00:23:49,530
遅れが生じることに気が付きました

363
00:23:49,963 --> 00:23:51,698
リンクをクリック

364
00:23:53,000 --> 00:23:56,136
開くのに１秒ほどかかりました

365
00:23:57,971 --> 00:24:02,509
これは ハンドラの
同期リクエストにより

366
00:23:57,971 --> 00:24:02,509
これは ハンドラの
同期リクエストにより

367
00:24:02,609 --> 00:24:06,146
Safariがブロックされるからです

368
00:24:06,346 --> 00:24:10,384
同期リクエストは
ブラウザがリクエストを―

369
00:24:10,484 --> 00:24:12,719
中止しないようにします

370
00:24:13,520 --> 00:24:17,157
しかしサーバの反応は遅くなります

371
00:24:17,257 --> 00:24:22,129
僕はデータがサーバに届けば
反応は気にしません

372
00:24:22,396 --> 00:24:26,300
そんな時は
Beacon APIが最適です

373
00:24:28,469 --> 00:24:33,006
まずはBeacon APIが
ブラウザで使えるかをチェック

374
00:24:33,106 --> 00:24:36,910
sendBeaconメソッドを確認します

375
00:24:37,344 --> 00:24:40,814
使えなければ
元の方法で続けます

376
00:24:41,448 --> 00:24:43,617
そこで使えます

377
00:24:46,720 --> 00:24:49,156
エンドポイントを渡します

378
00:24:49,923 --> 00:24:51,358
dataもです

379
00:24:53,527 --> 00:24:56,430
保存してサイトへ

380
00:24:56,864 --> 00:24:58,799
リロードします

381
00:24:59,299 --> 00:25:02,202
これで すぐに飛びます

382
00:24:59,299 --> 00:25:02,202
これで すぐに飛びます

383
00:25:02,302 --> 00:25:03,637
リンクをクリック

384
00:25:04,505 --> 00:25:05,539
開きました

385
00:25:05,906 --> 00:25:09,209
XMLHttpRequestと比べて

386
00:25:09,309 --> 00:25:11,979
コードが短く安定しています

387
00:25:12,079 --> 00:25:15,916
これで よりスムーズに
サイトが見られます

388
00:25:17,351 --> 00:25:18,652
(拍手)

389
00:25:18,752 --> 00:25:19,920
どうも

390
00:25:21,822 --> 00:25:26,493
次はiPadの問題を見てみましょう

391
00:25:33,000 --> 00:25:38,472
サイトはクロスフェードの
スライドショーにしています

392
00:25:39,973 --> 00:25:43,043
右矢印をタップすると進みます

393
00:25:44,545 --> 00:25:47,047
気付いたでしょうか

394
00:25:47,147 --> 00:25:50,284
画像が一瞬 白くなりました

395
00:25:50,450 --> 00:25:52,352
もう少し進めます

396
00:25:56,290 --> 00:25:59,193
コードを確認してみましょう

397
00:25:59,293 --> 00:26:01,295
改善できるはずです

398
00:25:59,293 --> 00:26:01,295
改善できるはずです

399
00:26:05,933 --> 00:26:08,235
これがスライドショーのクラス

400
00:26:08,602 --> 00:26:11,672
setCurrentSlideに注目します

401
00:26:11,772 --> 00:26:16,910
これがボタンのクリック時に
呼び出されるメソッドです

402
00:26:18,979 --> 00:26:22,516
各スライドは すぐに映らないので

403
00:26:22,616 --> 00:26:27,788
クリックすると
次の画像だけ読み込みます

404
00:26:31,391 --> 00:26:33,527
ここでの問題は―

405
00:26:33,627 --> 00:26:36,997
移行だけが すぐ行われることです

406
00:26:37,598 --> 00:26:39,800
画像を待ちません

407
00:26:39,900 --> 00:26:45,239
画像がロードできても
表示にはデコードが必要です

408
00:26:46,106 --> 00:26:50,344
そこで画像のロードと
デコードを待つように―

409
00:26:50,444 --> 00:26:52,913
調整したいと思います

410
00:26:53,080 --> 00:26:57,985
HTMLのimg要素に
新たなdecodeメソッドを―

411
00:26:58,819 --> 00:27:01,622
加えれば改善できます

412
00:26:58,819 --> 00:27:01,622
加えれば改善できます

413
00:27:02,389 --> 00:27:06,126
img要素のリファレンスです

414
00:27:08,996 --> 00:27:12,366
decodeメソッドが
画像を非同期でデコード

415
00:27:12,466 --> 00:27:18,005
処理が完了した時点で
promiseを返します

416
00:27:19,573 --> 00:27:24,344
そしてコールバックとして
transition関数を渡しました

417
00:27:26,346 --> 00:27:28,382
iPadに戻ります

418
00:27:33,587 --> 00:27:36,523
リロードでページを更新

419
00:27:37,024 --> 00:27:39,259
これでスムーズに進みます

420
00:27:41,295 --> 00:27:44,031
画像が白くなりません

421
00:27:45,566 --> 00:27:50,437
(拍手)

422
00:27:51,004 --> 00:27:52,806
Macに替えます

423
00:27:55,042 --> 00:27:57,544
サイトの最後のページには―

424
00:27:57,644 --> 00:28:01,882
鳥のアニメーションGIFを
載せています

425
00:27:57,644 --> 00:28:01,882
鳥のアニメーションGIFを
載せています

426
00:28:03,684 --> 00:28:07,054
これは かなり大きな容量です

427
00:28:07,821 --> 00:28:12,392
このGIFは
７MB強ありますが

428
00:28:12,493 --> 00:28:14,895
画質は良くはありません

429
00:28:14,995 --> 00:28:19,032
でもH.264でエンコードされた
mp4があるので

430
00:28:19,132 --> 00:28:21,902
これを直接 サイトに使います

431
00:28:22,536 --> 00:28:26,340
HTMLに戻り画像を探します

432
00:28:26,673 --> 00:28:27,708
ありました

433
00:28:28,609 --> 00:28:32,746
ファイルの拡張子を
mp4に変えます

434
00:28:33,547 --> 00:28:34,615
リロード

435
00:28:34,715 --> 00:28:35,682
これで―

436
00:28:36,717 --> 00:28:39,586
高質の動画に変わりました

437
00:28:39,686 --> 00:28:41,688
容量は約１MBですが―

438
00:28:41,788 --> 00:28:45,225
GIFより尺が少し
長くなっています

439
00:28:48,061 --> 00:28:50,130
src属性でも使えるので―

440
00:28:50,230 --> 00:28:54,835
フォールバック画像を
ブラウザに提供できます

441
00:29:00,274 --> 00:29:05,345
以上が新たな機能のうちの
４つになります

442
00:29:06,447 --> 00:29:10,651
これらを活用すれば
ユーザも喜ぶでしょう

443
00:29:10,751 --> 00:29:16,056
ではシュローカに新機能の
紹介を続けてもらいます

444
00:29:16,156 --> 00:29:21,862
(拍手)

445
00:29:25,065 --> 00:29:26,433
ありがとう

446
00:29:26,533 --> 00:29:31,672
ブロゴスフィアの非情さを
初めて知りました

447
00:29:33,240 --> 00:29:34,942
気を付けてね

448
00:29:37,344 --> 00:29:39,479
おさらいしましょう

449
00:29:39,580 --> 00:29:44,184
フォントコレクションで
ファイルサイズを縮小

450
00:29:44,284 --> 00:29:49,857
Font-Displayは
カスタムフォントを調整できます

451
00:29:49,957 --> 00:29:54,228
img要素でビデオを使えば
パフォーマンスが向上

452
00:29:54,328 --> 00:29:56,897
Passive Event Listenerで
スクロールが円滑に

453
00:29:56,997 --> 00:30:01,668
Beacon APIやImage Decodingで
非同期呼び出しを使えば

454
00:29:56,997 --> 00:30:01,668
Beacon APIやImage Decodingで
非同期呼び出しを使えば

455
00:30:01,768 --> 00:30:04,538
メインスレッドの遅れを防げます

456
00:30:06,006 --> 00:30:08,208
最後のトピックは―

457
00:30:08,308 --> 00:30:12,913
ユーザ体験を向上する新機能です

458
00:30:13,013 --> 00:30:15,749
まずはドラッグ＆ドロップです

459
00:30:16,517 --> 00:30:21,088
ドラッグ＆ドロップは
APIのアップデートで向上

460
00:30:21,188 --> 00:30:26,260
ディレクトリ単位で
アップロード可能です

461
00:30:26,360 --> 00:30:29,363
圧縮も必要ありません

462
00:30:29,730 --> 00:30:32,800
さらにHTML テキスト URLの―

463
00:30:32,900 --> 00:30:38,071
MIMEタイプの読み書きを
サポートします

464
00:30:38,605 --> 00:30:43,310
iOSにおいては
Data Transfer APIもアップデート

465
00:30:43,410 --> 00:30:48,782
ドラッグ＆ドロップ動作を
カスタマイズできます

466
00:30:49,116 --> 00:30:54,354
例えば ショッピングカートに
商品をドラッグしたい場合は

467
00:30:54,454 --> 00:30:57,424
動作をカスタマイズ

468
00:30:57,524 --> 00:30:59,593
img要素をドラッグし―

469
00:30:59,693 --> 00:31:04,398
要素名と金額を
カートにドロップします

470
00:30:59,693 --> 00:31:04,398
要素名と金額を
カートにドロップします

471
00:31:04,565 --> 00:31:07,935
このように
カスタマイズすることで

472
00:31:08,035 --> 00:31:11,872
より豊かな操作ができるのです

473
00:31:13,106 --> 00:31:16,043
APIの話に移ります

474
00:31:16,143 --> 00:31:19,379
Payment Request APIと
Apple Payです

475
00:31:19,479 --> 00:31:22,716
Apple Payは単なる
支払い方法ではなく

476
00:31:22,816 --> 00:31:25,953
電子決済を
考え直させるものです

477
00:31:26,053 --> 00:31:30,257
支払いの際に
カード情報が渡らないので

478
00:31:30,357 --> 00:31:33,160
より安全に支払いができます

479
00:31:33,393 --> 00:31:38,966
標準APIでのサポートを
望む声が多く上がったので

480
00:31:39,066 --> 00:31:43,003
力を合わせて取り組み
実現しました

481
00:31:43,103 --> 00:31:48,041
Apple PayはW3C標準のAPIで
利用可能です

482
00:31:49,610 --> 00:31:53,981
(拍手)

483
00:31:54,248 --> 00:31:57,551
これでオプションが増えました

484
00:31:57,651 --> 00:32:01,722
しかしApple Payを使うには―

485
00:31:57,651 --> 00:32:01,722
しかしApple Payを使うには―

486
00:32:01,822 --> 00:32:03,624
変更が必要です

487
00:32:03,724 --> 00:32:06,860
例えば 既存の決算フローでははく

488
00:32:06,960 --> 00:32:11,532
インターフェースに
Apple Payボタンを追加します

489
00:32:11,765 --> 00:32:17,604
現在 Payment Request APIで
使える機能は数点です

490
00:32:17,704 --> 00:32:23,043
きめ細かなエラー処理と
提携カードと音声表記の処理です

491
00:32:23,143 --> 00:32:26,480
これらはApple Pay JSだけで
使えます

492
00:32:26,580 --> 00:32:30,350
Apple Payで
この機能が必要であれば

493
00:32:30,450 --> 00:32:31,752
Apple Pay JSを使いましょう

494
00:32:33,620 --> 00:32:37,524
もう１つ対応したAPIは
Service Worker APIです

495
00:32:40,727 --> 00:32:43,964
ユーザのネット接続に
問題がある場合…

496
00:32:44,198 --> 00:32:48,035
不安定だったり
接続しなかったりする時―

497
00:32:48,135 --> 00:32:52,740
Service Workerなら
体裁よく処理できます

498
00:32:52,840 --> 00:32:55,909
Service Workerは
固有のオリジンで登録

499
00:32:56,009 --> 00:32:59,680
オフラインでキャッシュが使えて

500
00:32:59,780 --> 00:33:02,816
スクリプトのリクエストも
傍受します

501
00:32:59,780 --> 00:33:02,816
スクリプトのリクエストも
傍受します

502
00:33:02,916 --> 00:33:07,788
すべてのページが
同じインスタンスを持つので

503
00:33:07,888 --> 00:33:11,058
複数のタブを同時に開けます

504
00:33:11,158 --> 00:33:16,130
リクエストもすべて
同じスクリプトで傍受され

505
00:33:16,230 --> 00:33:19,800
不変のリソースを維持できるのです

506
00:33:19,900 --> 00:33:22,870
Service Workerで
Webページが安定します

507
00:33:22,970 --> 00:33:27,841
Webアプリケーションでも
SFSafariViewControllerでも

508
00:33:27,941 --> 00:33:31,912
不安定な接続環境にも
対応できるのです

509
00:33:33,380 --> 00:33:37,751
次はiPad向けの
Fullscreen APIです

510
00:33:38,452 --> 00:33:44,091
Safari内の要素をカスタマイズし
フルスクリーン調整ができます

511
00:33:44,725 --> 00:33:50,197
その要素をクリックすれば
フルスクリーンにできるのです

512
00:33:51,031 --> 00:33:56,170
(拍手)

513
00:33:56,537 --> 00:34:00,674
動画では自動判別し
キャンセルボタンを表示

514
00:33:56,537 --> 00:34:00,674
動画では自動判別し
キャンセルボタンを表示

515
00:34:00,774 --> 00:34:05,979
コンテンツが再生していれば
ボタンが消えます

516
00:34:07,748 --> 00:34:12,152
キャンセルボタンによる
コンテンツの遮断は―

517
00:34:12,252 --> 00:34:17,491
CSSの環境変数
fullscreen-inset-topで防げます

518
00:34:17,958 --> 00:34:22,362
さらにfullscreen-auto-
hide-delayを使って

519
00:34:22,462 --> 00:34:26,967
ボタンと同時にコンテンツを
隠すこともできます

520
00:34:29,203 --> 00:34:34,007
残り２項目となりましたが
まずはARです

521
00:34:34,107 --> 00:34:37,511
ARの話は何度も聞いてますよね

522
00:34:37,610 --> 00:34:41,481
ARモデルをUIに追加すれば―

523
00:34:41,681 --> 00:34:45,786
サイトでAR Quick Lookが
利用できます

524
00:34:45,886 --> 00:34:47,353
コードも長くなく―

525
00:34:47,454 --> 00:34:50,724
アンカータグを書き
ARにrel属性を指定

526
00:34:51,125 --> 00:34:56,228
USDZにhrefリンクを指定し
フォーマットをARモデルへ

527
00:34:56,330 --> 00:35:01,468
モデルの画像を含んだ
imgかpicture要素を追加

528
00:34:56,330 --> 00:35:01,468
モデルの画像を含んだ
imgかpicture要素を追加

529
00:35:01,568 --> 00:35:04,605
すると画像はこうなります

530
00:35:04,705 --> 00:35:08,042
画像の上部に
アイコンが表示され―

531
00:35:08,142 --> 00:35:12,613
クリックでARが
利用できることを示します

532
00:35:12,713 --> 00:35:17,251
これでWebサイトに
深みを加えられます

533
00:35:18,785 --> 00:35:22,756
詳細はセッションをご覧ください

534
00:35:22,856 --> 00:35:26,493
「Integrating Apps and Content
with AR Quick Look」です

535
00:35:28,028 --> 00:35:30,197
最後はwatchOSです

536
00:35:30,597 --> 00:35:33,667
WebサイトはMacBook―

537
00:35:34,501 --> 00:35:36,336
そしてiPad

538
00:35:36,670 --> 00:35:41,108
ポケットサイズ画面の
iPhoneでも見られます

539
00:35:41,208 --> 00:35:44,711
今度は さらに小さな画面です

540
00:35:45,979 --> 00:35:49,917
watchOSでサイトが見られます

541
00:35:50,517 --> 00:35:54,121
(拍手)

542
00:35:54,221 --> 00:35:56,657
私はもう大歓迎です

543
00:35:56,757 --> 00:36:00,627
母からレシピが
送られてくるんですが

544
00:35:56,757 --> 00:36:00,627
母からレシピが
送られてくるんですが

545
00:36:00,728 --> 00:36:04,031
Eメールを見ながら
料理はできません

546
00:36:04,131 --> 00:36:09,403
でも今後は腕の上の画面で
レシピが見られるんです

547
00:36:10,037 --> 00:36:12,639
レスポンシブデザインで

548
00:36:12,740 --> 00:36:16,643
watchOSの画面でも
よく見えます

549
00:36:16,743 --> 00:36:20,180
Webサイトの
さらなる最適化も可能です

550
00:36:20,280 --> 00:36:25,419
WWDCの動画「Designing Web
Content for watchOS」を

551
00:36:25,519 --> 00:36:28,222
ご覧になってください

552
00:36:29,790 --> 00:36:33,093
先ほどのジェーソンのブログも―

553
00:36:33,193 --> 00:36:37,731
これらの機能で
さらに質を上げられるはずです

554
00:36:37,831 --> 00:36:41,635
彼を呼んで実演してもらいましょう

555
00:36:41,735 --> 00:36:42,736
よろしく

556
00:36:42,836 --> 00:36:46,406
(拍手)

557
00:36:46,507 --> 00:36:47,608
どうも

558
00:36:47,908 --> 00:36:53,514
僕は読者が工芸を始めやすい
ブログを目指しています

559
00:36:55,449 --> 00:36:57,484
iPadに替えますね

560
00:37:01,755 --> 00:37:06,326
そこで作業に必要な物の
リストを載せました

561
00:37:06,760 --> 00:37:09,697
さらに便利さを追求して―

562
00:37:10,230 --> 00:37:15,135
ショッピングリスト機能を
加えようと思いました

563
00:37:15,235 --> 00:37:18,705
読者はブログから買い物ができるし

564
00:37:18,805 --> 00:37:22,142
僕も小遣いが稼げます

565
00:37:23,310 --> 00:37:26,880
ドラッグ＆ドロップ機能を
加えれば―

566
00:37:26,980 --> 00:37:30,918
品物をショッピングリストに
移せます

567
00:37:43,730 --> 00:37:46,567
iPadでも問題ありません

568
00:37:47,868 --> 00:37:51,104
ではコードを見てみましょう

569
00:37:56,844 --> 00:37:59,413
それほど手間はかかりません

570
00:37:59,613 --> 00:38:03,951
Data Transfer APIを使って―

571
00:37:59,613 --> 00:38:03,951
Data Transfer APIを使って―

572
00:38:04,084 --> 00:38:09,423
各品にdragstartイベントを
加えます

573
00:38:11,091 --> 00:38:14,628
そしてリストである
ドロップゾーンには―

574
00:38:14,728 --> 00:38:16,730
dropイベントを追加

575
00:38:16,830 --> 00:38:19,533
これが保存されたテキストを―

576
00:38:20,067 --> 00:38:25,606
Data Transfer APIから取得し
shopping-list要素に加えます

577
00:38:29,109 --> 00:38:32,446
さらに要素を
ドロップしたいエリアに―

578
00:38:32,546 --> 00:38:36,250
dragoverイベントを追加

579
00:38:36,350 --> 00:38:42,956
これでデフォルトイベントを防ぎ
指定のドロップを可能にします

580
00:38:43,891 --> 00:38:47,628
これだけでショッピングUIが完成

581
00:38:47,728 --> 00:38:51,298
MacやiPadで
しっかり機能します

582
00:38:53,567 --> 00:38:59,273
ショッピングリストができたので
あとは購入方法です

583
00:39:01,542 --> 00:39:06,613
Payment Request APIで
Apple Payを提供します

584
00:39:09,016 --> 00:39:12,219
HTMLとCSSで
サイトに加えましたが―

585
00:39:12,319 --> 00:39:16,757
Apple Payボタンは
デフォルトで隠しています

586
00:39:16,857 --> 00:39:18,892
ユーザのデバイスが―

587
00:39:18,992 --> 00:39:23,564
Apple Payに対応する場合のみ
表示します

588
00:39:24,298 --> 00:39:25,799
その確認は―

589
00:39:27,134 --> 00:39:31,038
ApplePaySession.canMake
Paymentsメソッドを使用

590
00:39:32,072 --> 00:39:34,908
対応可ならボタンを表示します

591
00:39:38,579 --> 00:39:40,948
ボタンにイベントを追加

592
00:39:43,050 --> 00:39:47,387
関数内にPaymentRequest
インスタンスを生成し

593
00:39:47,488 --> 00:39:49,590
処理を開始します

594
00:39:54,628 --> 00:39:59,266
PaymentRequestがダメなら
Apple Pay JSです

595
00:40:02,469 --> 00:40:05,372
これがコンストラクタです

596
00:40:06,173 --> 00:40:08,308
引数は３つ入れられます

597
00:40:09,910 --> 00:40:13,480
まず 支払い方法の
データオブジェクトを追加

598
00:40:16,850 --> 00:40:20,354
これにApply Payの識別子や

599
00:40:20,454 --> 00:40:23,390
オプションが含まれています

600
00:40:26,627 --> 00:40:30,197
その下は支払いに関する詳細で

601
00:40:30,297 --> 00:40:33,167
ここで細かな処理を指定します

602
00:40:33,267 --> 00:40:37,271
サイト名や総額や商品名などです

603
00:40:39,273 --> 00:40:44,244
僕はリストの各品を
５ドルに設定しました

604
00:40:47,948 --> 00:40:50,517
最後はオプション引数に―

605
00:40:50,617 --> 00:40:55,689
処理を完了するのに必要な
ユーザ情報を記述します

606
00:40:57,491 --> 00:41:02,663
iPadに戻して
商品をリストに入れます

607
00:40:57,491 --> 00:41:02,663
iPadに戻して
商品をリストに入れます

608
00:41:11,071 --> 00:41:13,207
全情報を渡したので―

609
00:41:13,307 --> 00:41:18,178
シートを表示するのに
別のメソッドを呼び出します

610
00:41:19,513 --> 00:41:24,284
これがshowメソッドで
promiseを返します

611
00:41:24,385 --> 00:41:27,821
Face IDやTouch IDで
ユーザが処理を―

612
00:41:27,921 --> 00:41:30,591
認証した時にです

613
00:41:30,791 --> 00:41:33,994
ここで決済処理を行います

614
00:41:35,863 --> 00:41:40,667
そして 処理が成功
または失敗したかの値で

615
00:41:40,768 --> 00:41:43,303
completeを呼び出します

616
00:41:45,105 --> 00:41:46,840
iPadを確認

617
00:41:50,444 --> 00:41:51,511
できました

618
00:41:51,645 --> 00:41:56,283
(拍手)

619
00:41:56,383 --> 00:42:02,122
さらに決済セッションの取得など
数ステップあります

620
00:41:56,383 --> 00:42:02,122
さらに決済セッションの取得など
数ステップあります

621
00:42:02,222 --> 00:42:03,991
詳細については―

622
00:42:04,091 --> 00:42:10,197
Apple Developer Webサイトの
セッションをご覧ください

623
00:42:11,365 --> 00:42:12,866
僕のブログには―

624
00:42:13,600 --> 00:42:16,637
何かが欠けていると気付きました

625
00:42:18,172 --> 00:42:19,873
完成作品です

626
00:42:20,774 --> 00:42:24,878
そこで画像を加えようと思います

627
00:42:25,512 --> 00:42:28,248
でも静止画ではなく―

628
00:42:28,348 --> 00:42:32,753
実際の環境にある作品を
見られるようにしたい

629
00:42:32,953 --> 00:42:35,589
iOS 12の
新しいAR Quick Lookなら

630
00:42:35,689 --> 00:42:37,958
数コードで実現できます

631
00:42:42,596 --> 00:42:44,465
HTMLを開きます

632
00:42:44,932 --> 00:42:46,934
ここなら最適です

633
00:42:47,468 --> 00:42:49,937
早速 画像を追加し―

634
00:42:50,037 --> 00:42:54,842
バードハウスのモデル
USDZファイルにリンク

635
00:42:55,042 --> 00:42:57,544
ARのrel属性と共にです

636
00:43:00,514 --> 00:43:02,482
iPadに戻ると―

637
00:43:02,950 --> 00:43:06,220
いい感じの完成品が載っています

638
00:43:06,320 --> 00:43:11,125
AR Quick Lookのアイコンを
タップすると―

639
00:43:13,460 --> 00:43:19,867
モデルを動かしたり
実際の環境に置いたりできます

640
00:43:19,967 --> 00:43:22,803
これなら感覚がつかめます

641
00:43:23,537 --> 00:43:30,110
(拍手)

642
00:43:30,210 --> 00:43:33,313
とても簡単にできるので―

643
00:43:34,548 --> 00:43:37,217
セッションを見てみてください

644
00:43:37,317 --> 00:43:40,053
あとはシュローカに任せます

645
00:43:40,154 --> 00:43:41,121
どうも

646
00:43:41,321 --> 00:43:46,260
(拍手)

647
00:43:47,594 --> 00:43:49,730
ありがとう　ジェーソン

648
00:43:49,830 --> 00:43:52,466
いい感じのモデルでしたね

649
00:43:52,566 --> 00:43:58,539
あれを見てバードハウスを
作ってみようかと思いました

650
00:43:58,772 --> 00:44:00,841
実行するかは別です

651
00:43:58,772 --> 00:44:00,841
実行するかは別です

652
00:44:01,842 --> 00:44:04,645
おさらいです
ドラッグ＆ドロップと―

653
00:44:04,745 --> 00:44:08,682
iPadのフルスクリーンの
カスタマイズ

654
00:44:08,782 --> 00:44:11,819
Payment Request APIで
Apple Payをサポート

655
00:44:11,919 --> 00:44:15,289
Service Worker APIで
オフライン作業

656
00:44:15,722 --> 00:44:19,093
ARモデルでサイトに
深みを与えられ―

657
00:44:19,193 --> 00:44:22,930
それをApple Watchで
見られます

658
00:44:23,964 --> 00:44:28,302
これまでに機能の参照先を
お伝えしました

659
00:44:28,402 --> 00:44:31,505
ですが質問のある方は―

660
00:44:31,605 --> 00:44:35,075
ラボに寄っていってください

661
00:44:35,175 --> 00:44:37,411
セッションのリンクから―

662
00:44:37,511 --> 00:44:42,182
今回のドキュメントと
関連セッションをご確認ください

663
00:44:42,482 --> 00:44:47,521
Webに関する機能は
豊富にあります

664
00:44:47,621 --> 00:44:50,924
Appleは絶え間なく―

665
00:44:51,024 --> 00:44:55,963
SafariとWebKitの
サポート向上を行っています

666
00:44:56,063 --> 00:45:00,734
これによりWebやネイティブ
拡張のデベロッパが

667
00:44:56,063 --> 00:45:00,734
これによりWebやネイティブ
拡張のデベロッパが

668
00:45:00,834 --> 00:45:05,572
最高のユーザ体験を
提供できるのです

669
00:45:06,473 --> 00:45:10,510
セッションへの参加を感謝します

670
00:45:10,611 --> 00:45:15,015
このあともWWDCを
楽しんでいってください

671
00:45:15,115 --> 00:45:19,553
(拍手)