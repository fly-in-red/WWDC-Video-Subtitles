
1
00:00:07,040 --> 00:00:16,950
(音楽)

2
00:00:22,556 --> 00:00:23,624
こんにちは

3
00:00:25,025 --> 00:00:27,394
このセッションへようこそ

4
00:00:28,228 --> 00:00:31,698
tvOSチームの
ハンス･キムです

5
00:00:32,366 --> 00:00:37,204
今日は tvOS 12の
新機能をご紹介します

6
00:00:37,738 --> 00:00:40,274
パスワードの自動入力と

7
00:00:40,908 --> 00:00:45,512
フォーカスエンジンの
新しい拡張機能

8
00:00:46,079 --> 00:00:49,183
そして最後に tvOSの

9
00:00:49,283 --> 00:00:52,486
新しいUIパターンを
発表します

10
00:00:53,020 --> 00:00:55,689
幅広い内容で
デモもあります

11
00:00:55,789 --> 00:00:56,857
始めましょう

12
00:00:57,291 --> 00:01:00,827
まずは アレックスと
コンラッドによる―

13
00:00:57,291 --> 00:01:00,827
まずは アレックスと
コンラッドによる―

14
00:01:00,928 --> 00:01:04,096
パスワードの自動入力の
紹介です

15
00:01:05,766 --> 00:01:10,804
(拍手)

16
00:01:11,071 --> 00:01:12,172
ありがとう

17
00:01:12,573 --> 00:01:15,108
こんにちは　アレックスです

18
00:01:15,209 --> 00:01:19,346
今日はパスワードの
自動入力をご紹介します

19
00:01:20,614 --> 00:01:23,784
誰もがサインインを
経験します

20
00:01:23,884 --> 00:01:26,753
例えば開発中の“shiny.”は

21
00:01:26,854 --> 00:01:31,391
サインインして犬の写真を
楽しむアプリケーションです

22
00:01:32,125 --> 00:01:34,661
サインインを
簡単にするため―

23
00:01:34,761 --> 00:01:37,798
tvOS 12には
パスワードの自動入力を導入

24
00:01:37,965 --> 00:01:43,403
iOSと同じく
操作は簡単です

25
00:01:43,504 --> 00:01:44,705
デモをします

26
00:01:53,547 --> 00:01:55,849
コンティニュイティキーボードを
使います

27
00:01:55,949 --> 00:01:59,319
これは
iOSデバイスを使って

28
00:01:59,419 --> 00:02:03,924
Apple TVにテキストを
入力する機能ですね

29
00:01:59,419 --> 00:02:03,924
Apple TVにテキストを
入力する機能ですね

30
00:02:04,024 --> 00:02:05,025
見てみましょう

31
00:02:05,826 --> 00:02:09,562
shiny.の画面で
フィールドを選択

32
00:02:11,231 --> 00:02:14,234
コンティニュイティキーボードの
通知が出ました

33
00:02:14,334 --> 00:02:17,804
自動入力の機能が
加わっています

34
00:02:17,971 --> 00:02:19,506
通知を開くと

35
00:02:21,175 --> 00:02:26,647
QuickTypeバーに
クレデンシャルが出ます

36
00:02:26,747 --> 00:02:30,918
タップすれば入力が完了し
サインインできます

37
00:02:31,018 --> 00:02:32,252
やってみます

38
00:02:35,589 --> 00:02:37,257
かわいいですよね

39
00:02:37,958 --> 00:02:42,596
(拍手)

40
00:02:43,664 --> 00:02:45,732
iPhoneに通知が出たのは

41
00:02:45,833 --> 00:02:49,469
iCloud上のアカウントが
同じだからです

42
00:02:49,837 --> 00:02:52,539
Apple TV Remote App
などでも

43
00:02:52,639 --> 00:02:55,809
同様の操作が可能です

44
00:02:56,777 --> 00:02:59,546
さらに こんなことも
可能です

45
00:02:59,646 --> 00:03:02,783
僕のApple TVを
初めて使う人でも

46
00:02:59,646 --> 00:03:02,783
僕のApple TVを
初めて使う人でも

47
00:03:02,883 --> 00:03:06,320
簡単にサインインが
できるのです

48
00:03:06,420 --> 00:03:09,456
コンラッドに
やってもらいましょう

49
00:03:11,058 --> 00:03:13,994
(拍手)

50
00:03:14,094 --> 00:03:15,195
ありがとう

51
00:03:16,129 --> 00:03:20,200
僕はアレックスの家に
遊びに来ています

52
00:03:20,767 --> 00:03:22,803
彼の犬はかわいいですね

53
00:03:23,170 --> 00:03:28,408
でも自分の犬のマックスか
ミンの写真が見たいので

54
00:03:28,509 --> 00:03:30,911
shiny.に
サインインします

55
00:03:31,478 --> 00:03:34,815
彼のApple TVは
初めて使うので

56
00:03:34,915 --> 00:03:39,286
先ほどの方法では
サインインできません

57
00:03:39,520 --> 00:03:42,556
しかも
iCloud キーチェーンで

58
00:03:42,656 --> 00:03:46,360
強力なパスワードを管理していて
覚えていません

59
00:03:46,627 --> 00:03:49,663
自分のパスワードを調べて

60
00:03:49,763 --> 00:03:54,601
１文字ずつ入力することに
なりそうです

61
00:03:55,369 --> 00:03:56,803
見てみましょう

62
00:03:58,539 --> 00:04:01,842
僕のiPhoneを用意します

63
00:03:58,539 --> 00:04:01,842
僕のiPhoneを用意します

64
00:04:02,776 --> 00:04:05,012
サインインしましょう

65
00:04:05,312 --> 00:04:09,249
設定を開いたり
Siriにパスワードを

66
00:04:09,349 --> 00:04:11,618
聞かなくて済みました

67
00:04:11,718 --> 00:04:15,856
iPhoneがすでに パスワードの
自動入力をオファーしています

68
00:04:16,690 --> 00:04:19,293
この通知を開けば

69
00:04:20,594 --> 00:04:21,461
このとおり

70
00:04:21,628 --> 00:04:25,866
PINを入力すれば
Apple TVと

71
00:04:25,966 --> 00:04:28,635
安全に接続できます

72
00:04:29,136 --> 00:04:30,304
Touch IDで認証

73
00:04:31,305 --> 00:04:34,374
shiny.のクレデンシャルが
一番上に出ます

74
00:04:34,474 --> 00:04:37,444
ワンタップでサインイン

75
00:04:37,678 --> 00:04:38,812
簡単です

76
00:04:38,912 --> 00:04:42,816
(拍手)

77
00:04:42,916 --> 00:04:44,651
これはミンです

78
00:04:46,253 --> 00:04:48,655
なぜ今の操作ができたのか

79
00:04:48,956 --> 00:04:51,525
不思議に思われますよね

80
00:04:52,159 --> 00:04:55,729
なぜ僕のiPhoneだけに
通知が出たのか？

81
00:04:56,496 --> 00:04:59,933
これは本当に
すごい機能なんです

82
00:05:00,567 --> 00:05:04,571
Siri Remoteが
近くのiPhoneを探し

83
00:05:04,671 --> 00:05:07,441
通知を表示したのです

84
00:05:07,541 --> 00:05:10,744
それが
僕のiPhoneでした

85
00:05:11,211 --> 00:05:14,414
これが
パスワードの自動入力です

86
00:05:14,581 --> 00:05:18,285
アレックスに
戻ってきてもらいましょう

87
00:05:18,919 --> 00:05:23,724
どのアプリケーションでも
使えることをお見せします

88
00:05:23,924 --> 00:05:24,791
アレックス

89
00:05:25,192 --> 00:05:29,630
(拍手)

90
00:05:29,863 --> 00:05:30,898
どうも

91
00:05:31,465 --> 00:05:32,866
良いデモです

92
00:05:33,033 --> 00:05:34,801
すごい機能ですね

93
00:05:36,503 --> 00:05:41,074
パスワードの自動入力は
tvOSでのサインインを

94
00:05:41,175 --> 00:05:43,477
簡単にするためのものです

95
00:05:43,911 --> 00:05:48,649
アプリケーションを大きく
変える必要はありません

96
00:05:49,016 --> 00:05:54,121
少し手を加えるだけで
この機能が最大限に使えます

97
00:05:54,221 --> 00:05:55,856
確認しましょう

98
00:05:57,724 --> 00:06:01,795
まずQuickTypeバーを出し

99
00:05:57,724 --> 00:06:01,795
まずQuickTypeバーを出し

100
00:06:02,563 --> 00:06:07,067
次にクレデンシャルを
表示させます

101
00:06:07,601 --> 00:06:08,735
最後に

102
00:06:09,336 --> 00:06:12,472
ワンタップの
サインインを可能にします

103
00:06:12,639 --> 00:06:15,008
細かく見ていきます

104
00:06:16,343 --> 00:06:19,379
QuickTypeバーを出すには

105
00:06:19,479 --> 00:06:22,449
UITextContentTypeを
使います

106
00:06:23,116 --> 00:06:26,720
tvOSがユーザ名と
パスワードを探すために

107
00:06:26,820 --> 00:06:30,724
テキストフィールドを
強調します

108
00:06:31,358 --> 00:06:34,461
シングルプロパティと
同じくらい簡単です

109
00:06:34,561 --> 00:06:39,700
ユーザ名のフィールドには
textContentTypeに―

110
00:06:39,800 --> 00:06:44,271
.usernameを設定し
パスワードも同様にします

111
00:06:44,471 --> 00:06:47,508
Interface Builderでも
できます

112
00:06:48,775 --> 00:06:50,978
UITextContentTypeを
使うと

113
00:06:51,078 --> 00:06:54,548
画面にはこのような
通知が出ます

114
00:06:54,648 --> 00:06:58,252
これでパスワードの入力が
できますが

115
00:06:58,452 --> 00:07:01,889
何回もタップする
必要があります

116
00:06:58,452 --> 00:07:01,889
何回もタップする
必要があります

117
00:07:02,022 --> 00:07:04,791
QuickTypeバーの上に

118
00:07:04,992 --> 00:07:08,795
クレデンシャルを
表示したいですよね

119
00:07:09,496 --> 00:07:14,168
これを行うのが
Associated Domainsです

120
00:07:14,268 --> 00:07:18,872
クレデンシャルの候補を
安全に通知します

121
00:07:21,375 --> 00:07:24,111
この技術はHandoffなど

122
00:07:24,211 --> 00:07:27,781
他の機能にも使われています

123
00:07:31,685 --> 00:07:35,856
アプリケーションと
接続先のドメインとを

124
00:07:35,956 --> 00:07:38,158
安全に関連付けます

125
00:07:39,059 --> 00:07:41,595
これを使い
QuickTypeバー上に―

126
00:07:41,695 --> 00:07:45,399
正確なクレデンシャルを
表示します

127
00:07:46,667 --> 00:07:50,637
Associated Domainsを知るには
WWDC 2017の

128
00:07:50,737 --> 00:07:54,741
“Introducing Password AutoFill
for Apps”がお勧めです

129
00:07:55,108 --> 00:08:00,347
iOSでの使い方を
順を追って説明していますが

130
00:07:55,108 --> 00:08:00,347
iOSでの使い方を
順を追って説明していますが

131
00:08:00,447 --> 00:08:03,150
tvOSでも同じ手順です

132
00:08:04,651 --> 00:08:06,520
この技術を使うと

133
00:08:06,620 --> 00:08:11,992
shiny.の画面には
このように表示されます

134
00:08:12,092 --> 00:08:13,126
すごいですよね

135
00:08:13,227 --> 00:08:18,632
文字を入力することなく
フィールドが埋まりました

136
00:08:19,099 --> 00:08:22,503
ユーザが一番見たいのは
これですね

137
00:08:22,836 --> 00:08:26,106
ワンタップだけで
サインインして

138
00:08:26,206 --> 00:08:28,909
愛犬の写真が見られます

139
00:08:30,043 --> 00:08:34,615
preferredFocusEnvironments APIを
実装すれば可能です

140
00:08:36,216 --> 00:08:39,553
パスワードを入れると
フォーカスが更新され

141
00:08:39,653 --> 00:08:44,358
フォーカスされたボタンが
サインインを実行します

142
00:08:44,458 --> 00:08:47,928
このAPIを実装することで

143
00:08:48,028 --> 00:08:51,064
フォーカスエンジンが
ボタンを認識します

144
00:08:51,231 --> 00:08:53,133
では見ていきましょう

145
00:08:54,501 --> 00:08:58,305
UIFocusEnvironmentオブジェクトの
配列を返す―

146
00:08:58,405 --> 00:09:01,975
preferredFocusEnvironments APIの
サンプル画面です

147
00:08:58,405 --> 00:09:01,975
preferredFocusEnvironments APIの
サンプル画面です

148
00:09:02,876 --> 00:09:06,380
このフィールドから
テキストを抽出し

149
00:09:06,480 --> 00:09:09,816
loginButtonを
返すだけです

150
00:09:10,317 --> 00:09:14,121
ユーザが
まだ入力していない場合

151
00:09:14,221 --> 00:09:17,658
usernameTextFieldを
返し フォーカスさせます

152
00:09:17,891 --> 00:09:19,026
簡単です

153
00:09:20,594 --> 00:09:23,864
パスワードの
自動入力についてまとめます

154
00:09:25,098 --> 00:09:29,736
ワンタップだけで
サインインできるので

155
00:09:29,836 --> 00:09:33,307
ユーザの手間を省きます

156
00:09:33,540 --> 00:09:38,412
デベロッパにとっても
仕組みはとても簡単です

157
00:09:39,179 --> 00:09:43,217
UITextContentTypeや―

158
00:09:44,418 --> 00:09:48,956
Associated Domainsで
クレデンシャルを表示

159
00:09:49,923 --> 00:09:52,759
最後に
preferredFocusEnvironmentsで

160
00:09:52,860 --> 00:09:56,029
ワンタップでのサインインを
可能にします

161
00:09:56,697 --> 00:09:58,832
パスワードの自動入力については
以上です

162
00:09:58,932 --> 00:10:02,169
早く皆さんに
使ってもらいたいです

163
00:09:58,932 --> 00:10:02,169
早く皆さんに
使ってもらいたいです

164
00:10:02,402 --> 00:10:05,372
次はフォーカスについて
エイダがお話します

165
00:10:05,472 --> 00:10:11,445
(拍手)

166
00:10:13,313 --> 00:10:14,548
ありがとう

167
00:10:14,648 --> 00:10:16,216
どうも　エイダです

168
00:10:16,316 --> 00:10:22,089
tvOS 12で改良された
フォーカスをご紹介します

169
00:10:22,789 --> 00:10:27,394
アプリケーションの動作には
フォーカスが重要です

170
00:10:27,494 --> 00:10:32,366
Siri Remoteの
Touchサーフェスと連動して

171
00:10:32,466 --> 00:10:35,602
コンテンツ間を
滑らかに移動します

172
00:10:36,470 --> 00:10:39,706
UIKit SpriteKit SceneKitで
作られたアプリケーションは

173
00:10:39,806 --> 00:10:41,942
元々フォーカスに
対応しています

174
00:10:42,042 --> 00:10:45,879
しかし他の方法でレンダリングする
アプリケーションは

175
00:10:45,979 --> 00:10:49,349
フォーカスエンジンに
対応していませんでした

176
00:10:49,950 --> 00:10:53,187
今回 tvOS 12の
フォーカスエンジンは

177
00:10:53,287 --> 00:10:57,524
どのレンダリング方式でも
サポートします

178
00:10:57,858 --> 00:11:02,830
(拍手)

179
00:10:57,858 --> 00:11:02,830
(拍手)

180
00:11:02,930 --> 00:11:06,333
Metalで開発された
アプリケーションでも

181
00:11:06,433 --> 00:11:10,237
直接 フォーカスが
使えるのです

182
00:11:10,337 --> 00:11:13,340
UIKitを継承しない
クラスでも

183
00:11:13,440 --> 00:11:18,278
フォーカスへの適合が
可能になったからです

184
00:11:18,645 --> 00:11:20,914
フォーカスされた状態を

185
00:11:21,014 --> 00:11:25,185
アプリケーションが
管理するのです

186
00:11:25,285 --> 00:11:29,089
そしてフォーカスが
動ける範囲も特定します

187
00:11:29,189 --> 00:11:34,862
アクセシビリティのサポートや
スクロールなどの動きは

188
00:11:34,962 --> 00:11:38,031
ネイティブtvOSアプリケーションと
同じです

189
00:11:38,932 --> 00:11:41,635
新しいフォーカスの
APIを見る前に

190
00:11:41,735 --> 00:11:45,739
現在のフォーカスの
コンポーネントを紹介します

191
00:11:46,139 --> 00:11:48,642
まず
UIFocusEnvironmentです

192
00:11:48,742 --> 00:11:52,846
フォーカスが起こる状態を
管理するプロトコルです

193
00:11:52,946 --> 00:11:57,751
フォーカスの更新を通知して
ビヘイビアに影響します

194
00:11:57,851 --> 00:12:02,789
UIKitでは UIViewControllerが
これを実装しています

195
00:11:57,851 --> 00:12:02,789
UIKitでは UIViewControllerが
これを実装しています

196
00:12:03,323 --> 00:12:05,826
次に UIFocusItemです

197
00:12:06,260 --> 00:12:08,962
UIFocusEnvironmentを
継承し

198
00:12:09,062 --> 00:12:13,433
アイテムに
実際にフォーカスできます

199
00:12:13,534 --> 00:12:16,737
UIKitのUIViewや
SpriteKitのSKNodeなどに

200
00:12:16,837 --> 00:12:19,439
実装されています

201
00:12:19,840 --> 00:12:25,445
最後に UIFocusSystemは
フォーカス時の音を

202
00:12:25,546 --> 00:12:30,517
カスタマイズすることが
可能となっています

203
00:12:31,084 --> 00:12:35,589
詳しい情報やフォーカスの
デバッグについては

204
00:12:35,689 --> 00:12:41,428
“Focus Interaction in
tvOS 11”をお勧めします

205
00:12:42,029 --> 00:12:44,798
ここからは
フォーカスエンジンの

206
00:12:44,898 --> 00:12:47,401
新しい要素の紹介です

207
00:12:47,734 --> 00:12:50,337
まず tvOS 12では

208
00:12:50,437 --> 00:12:54,241
FocusSystemオブジェクトの
機能を拡張

209
00:12:54,341 --> 00:12:57,678
与えられた環境に対して
FocusSystemを読み出し

210
00:12:57,778 --> 00:13:01,748
そこからフォーカスされた
アイテムにアクセスできます

211
00:12:57,778 --> 00:13:01,748
そこからフォーカスされた
アイテムにアクセスできます

212
00:13:02,182 --> 00:13:07,020
新しいプロトコル
UIFocusItemContainerは

213
00:13:07,120 --> 00:13:10,524
空間的コンテキストを
アイテムに与えます

214
00:13:11,158 --> 00:13:14,628
UIFocusEnvironmentが
制御するプロトコルです

215
00:13:14,728 --> 00:13:18,232
アイテムの位置を
ある領域で特定し

216
00:13:18,332 --> 00:13:22,169
最適なフォーカスの候補へと
導きます

217
00:13:23,370 --> 00:13:28,909
特別なプロトコルの
UIFocusItemScrollableContainerは

218
00:13:29,009 --> 00:13:33,780
フォーカスが動く時の
スクロールをサポートします

219
00:13:34,381 --> 00:13:38,852
最後に
UIFocusMovementHintです

220
00:13:38,952 --> 00:13:42,890
Raw値によって
視覚効果を作り

221
00:13:42,990 --> 00:13:46,660
フォーカスの
次の動きを示します

222
00:13:47,161 --> 00:13:52,733
どのようにクラスを
組み込むか見てみましょう

223
00:13:53,066 --> 00:13:56,503
まずはUIFocusEnvironmentの
実装です

224
00:13:56,703 --> 00:14:02,509
フォーカスエンジンが
プロトコルを見つけるために

225
00:13:56,703 --> 00:14:02,509
フォーカスエンジンが
プロトコルを見つけるために

226
00:14:02,609 --> 00:14:07,214
parentFocusEnvironmentと
focusItemContainerを設定します

227
00:14:07,314 --> 00:14:11,318
例えば UIViewControllerでは
parentViewControllerに

228
00:14:11,418 --> 00:14:16,390
parentFocusEnvironmentを
設定するといった具合です

229
00:14:17,491 --> 00:14:22,763
更新をコントロールするための
メソッドがいくつかあります

230
00:14:22,863 --> 00:14:27,701
preferredFocusEnvironmentは
最初のビューが決まると

231
00:14:27,801 --> 00:14:31,605
次にフォーカスする場所を
選べます

232
00:14:31,705 --> 00:14:34,174
プログラムでの
更新も同じです

233
00:14:34,675 --> 00:14:39,446
さらに２つのメソッドを
ご紹介したいと思います

234
00:14:39,546 --> 00:14:43,050
SetNeedsFocusUpdateと
updateFocusIfNeededです

235
00:14:43,150 --> 00:14:45,285
これらの実装には

236
00:14:45,385 --> 00:14:50,090
UIFocusSystem上の特定の
メソッドを呼び出します

237
00:14:51,291 --> 00:14:55,262
次に
UIFocusItemContainerです

238
00:14:57,030 --> 00:14:59,933
まずcoordinateSpaceを
入力します

239
00:15:00,033 --> 00:15:02,803
UIView自体が
座標空間となります

240
00:15:02,903 --> 00:15:07,007
抽象クラスの場合は
今のcoordinateSpaceを返すか

241
00:15:07,107 --> 00:15:08,909
独自の座標空間を実装

242
00:15:09,776 --> 00:15:12,880
次にfocusItems in rectを
実装します

243
00:15:12,980 --> 00:15:16,083
これは与えられたrectと
重なった―

244
00:15:16,183 --> 00:15:18,919
すべてのアイテムを返します

245
00:15:19,052 --> 00:15:24,024
このメソッドに渡されたrectは
座標空間に現れます

246
00:15:24,124 --> 00:15:28,095
各アイテムのフレームも
同じように

247
00:15:28,195 --> 00:15:31,231
coordinateSpaceに現れます

248
00:15:33,100 --> 00:15:36,169
次にカスタムした
UIFocusItemを実装

249
00:15:36,770 --> 00:15:42,576
UIFocusEnvironmentのメソッドも
実装する必要があります

250
00:15:43,410 --> 00:15:46,847
アイテムにフォーカスを
動かすために

251
00:15:46,947 --> 00:15:50,117
canBecomeFocusedから
trueを返します

252
00:15:50,951 --> 00:15:56,223
ユーザがTouchサーフェスに触ると

253
00:15:56,323 --> 00:15:58,725
呼び出されるメソッドです

254
00:15:58,826 --> 00:16:02,129
フォーカスアイテムに
動きのヒントを与えます

255
00:15:58,826 --> 00:16:02,129
フォーカスアイテムに
動きのヒントを与えます

256
00:16:02,229 --> 00:16:05,365
視覚効果を作る
Raw値によって

257
00:16:05,466 --> 00:16:08,936
次の移動先を示すのです

258
00:16:09,570 --> 00:16:12,039
最後にフレームを設定します

259
00:16:12,139 --> 00:16:16,143
このフレームも
UIFocusItemContainerの

260
00:16:16,243 --> 00:16:18,679
座標空間に出現させます

261
00:16:18,779 --> 00:16:23,417
UIViewでは 親のビューの
座標空間に現れます

262
00:16:23,517 --> 00:16:28,355
UIFocusItemContainerと
同じ座標空間です

263
00:16:29,156 --> 00:16:33,427
UIFocusMovementHintオブジェクト
を詳しく見ましょう

264
00:16:34,061 --> 00:16:37,097
動きの方向はベクトル量で
値の範囲は―

265
00:16:37,197 --> 00:16:40,434
-１と-１から １と１です

266
00:16:40,534 --> 00:16:44,905
移動するフォーカスの
方向を表します

267
00:16:45,305 --> 00:16:48,809
この値は
Touchサーフェス上での

268
00:16:48,909 --> 00:16:51,378
指の動きと連動します

269
00:16:52,446 --> 00:16:56,416
perspective rotation
translationの値を使って

270
00:16:56,517 --> 00:17:00,454
tvOSでの
ヒントを出す動きを作ります

271
00:16:56,517 --> 00:17:00,454
tvOSでの
ヒントを出す動きを作ります

272
00:17:00,888 --> 00:17:06,560
interactionTransformが
この値を3Dに変換します

273
00:17:08,161 --> 00:17:13,367
UIFocusItemScrollableContainerを
実装しましょう

274
00:17:13,634 --> 00:17:18,638
この特別なプロトコルを
適合させることで

275
00:17:18,739 --> 00:17:22,576
スクロールをサポートする
信号が送られます

276
00:17:22,675 --> 00:17:26,346
UIScrollViewで
やってみましょう

277
00:17:26,847 --> 00:17:30,017
３つのプロパティを追加して

278
00:17:30,117 --> 00:17:33,187
スクロールの動きを
可能にします

279
00:17:33,287 --> 00:17:38,325
まずは読み書きを行う
contentOffsetです

280
00:17:38,425 --> 00:17:41,395
スクロールの距離を描きます

281
00:17:41,495 --> 00:17:45,065
フォーカスされたアイテムを
表示したままにする時

282
00:17:45,165 --> 00:17:50,270
フォーカスエンジンによって
自動的に生成されます

283
00:17:50,871 --> 00:17:53,073
次のcontentSizeは

284
00:17:53,173 --> 00:17:58,111
コンテンツのスクロール領域を
表すものです

285
00:17:58,212 --> 00:18:04,184
そしてvisibleSizeが表すのは
画面のサイズです

286
00:17:58,212 --> 00:18:04,184
そしてvisibleSizeが表すのは
画面のサイズです

287
00:18:04,284 --> 00:18:08,655
UIScrollViewのbounds.sizeと
類似しています

288
00:18:09,756 --> 00:18:14,127
重要なのはcontentOffsetが
自動生成されること

289
00:18:14,228 --> 00:18:18,899
生成時に適切な
コンテンツの更新を行うかは

290
00:18:18,999 --> 00:18:21,201
皆さん次第です

291
00:18:24,071 --> 00:18:28,642
次はアクセシビリティの
加え方です

292
00:18:28,809 --> 00:18:31,245
とても簡単ですよ

293
00:18:31,378 --> 00:18:35,916
UIFocusItemContainerと
focusItems in rectの実装で

294
00:18:36,016 --> 00:18:39,920
次のことが
可能になったのです

295
00:18:40,020 --> 00:18:43,023
VoiceOverによる
ナビゲーションです

296
00:18:43,390 --> 00:18:48,962
accessibilityLabelと
accessibilityHintを設定し

297
00:18:49,062 --> 00:18:53,367
快適なVoiceOverを
提供してください

298
00:18:53,534 --> 00:18:57,337
より詳しく知るためには
WWDC2016の

299
00:18:57,438 --> 00:19:01,642
“What's New in Accessibility”
をお勧めします

300
00:18:57,438 --> 00:19:01,642
“What's New in Accessibility”
をお勧めします

301
00:19:01,742 --> 00:19:06,813
tvOSでのフォーカスと
VoiceOverのことが分かります

302
00:19:08,148 --> 00:19:11,285
ここで
ポールを呼びましょう

303
00:19:11,385 --> 00:19:15,322
Metalアプリケーションでの
デモをお見せします

304
00:19:16,290 --> 00:19:21,795
(拍手)

305
00:19:21,895 --> 00:19:22,796
どうも

306
00:19:23,764 --> 00:19:26,800
Metalを使ったゲームの
画面を作っています

307
00:19:27,034 --> 00:19:29,837
下側には標準的なボタン

308
00:19:30,504 --> 00:19:33,740
上側にはレベルを選ぶ
タイルです

309
00:19:33,941 --> 00:19:36,677
ゲームエンジンが描きました

310
00:19:36,777 --> 00:19:39,813
見事な3Dグラフィックです

311
00:19:40,647 --> 00:19:43,517
リモートでタイルを
選択します

312
00:19:44,184 --> 00:19:47,454
今までは自分で
イベントをハンドルし

313
00:19:47,621 --> 00:19:52,059
フォーカスエンジンに合う
ナビゲーションを実装していました

314
00:19:52,159 --> 00:19:56,363
tvOS 12では タイルを
直接結びつけられます

315
00:19:56,530 --> 00:19:57,931
やってみます

316
00:20:01,368 --> 00:20:06,173
LevelTileクラスを拡張し
UIFocusItemを実装

317
00:20:06,540 --> 00:20:09,042
これで
フォーカスが当たります

318
00:20:09,810 --> 00:20:13,380
上部のコードに
注目してください

319
00:20:14,081 --> 00:20:17,818
canBecomeFocusedを
trueに入力

320
00:20:18,552 --> 00:20:22,890
parentFocusEnvironmentは
戻り値をレンダ可能のビューに

321
00:20:23,423 --> 00:20:25,893
didUpdateFocus in contextは

322
00:20:25,993 --> 00:20:30,497
フォーカス時のタイルを
activeにセットします

323
00:20:31,532 --> 00:20:35,068
次にフォーカスエンジンを
設定します

324
00:20:35,335 --> 00:20:39,673
レンダ可能なMetalビューに
拡張します

325
00:20:40,374 --> 00:20:44,044
ビュー階層には
組み込み済みのため

326
00:20:44,144 --> 00:20:45,812
余計な設定はしません

327
00:20:46,380 --> 00:20:50,651
UIViewなので
UIFocusItemContainerに従い

328
00:20:50,751 --> 00:20:53,720
coordinateSpaceとして
機能します

329
00:20:54,288 --> 00:20:57,858
あとはfocusItem in rectを
オーバーライド

330
00:20:58,058 --> 00:21:02,162
UIFocusItemとなった
タイルを返します

331
00:20:58,058 --> 00:21:02,162
UIFocusItemとなった
タイルを返します

332
00:21:03,030 --> 00:21:04,765
タイルを返すだけで

333
00:21:04,865 --> 00:21:08,902
フォーカスの
パフォーマンスが得られます

334
00:21:10,204 --> 00:21:13,307
では表示してみましょう

335
00:21:17,978 --> 00:21:20,948
タイルが
フォーカス可能となり

336
00:21:21,048 --> 00:21:24,251
標準的な効果音も加わります

337
00:21:24,351 --> 00:21:29,056
下部のボタンにも
フォーカスが可能です

338
00:21:30,257 --> 00:21:33,961
しかしタイルが
画面から途切れていると

339
00:21:34,061 --> 00:21:37,464
フォーカスを
見失ってしまいます

340
00:21:38,031 --> 00:21:43,403
そこでタイルが画面内へ
動く設定を行います

341
00:21:46,273 --> 00:21:48,842
レンダ可能のビューにします

342
00:21:48,942 --> 00:21:52,546
今回 実装するのは
UIFocusItemScrollableContainer

343
00:21:52,946 --> 00:21:57,251
contentOffsetで
レンダリングを調整します

344
00:21:57,384 --> 00:22:03,524
これでフォーカスされた
アイテムは画面内に動きます

345
00:21:57,384 --> 00:22:03,524
これでフォーカスされた
アイテムは画面内に動きます

346
00:22:04,124 --> 00:22:08,362
UIViewのため
bounds.originで更新

347
00:22:08,462 --> 00:22:11,698
coordinateSpaceは
引き続き機能します

348
00:22:14,668 --> 00:22:15,802
実行します

349
00:22:18,539 --> 00:22:22,109
フォーカスされたタイルは
画面内に収まり

350
00:22:22,609 --> 00:22:26,980
またスクロールも
スムーズになりました

351
00:22:27,080 --> 00:22:27,781
ありがとう

352
00:22:28,182 --> 00:22:32,886
UIScrollViewの
アニメーションに似ています

353
00:22:34,121 --> 00:22:37,157
さらに機能を向上できます

354
00:22:37,257 --> 00:22:42,329
本来の仕様のように
タイルに動作を与えられます

355
00:22:43,697 --> 00:22:44,898
やってみましょう

356
00:22:46,233 --> 00:22:48,068
LevelTileに戻り

357
00:22:48,302 --> 00:22:52,739
didHintFocusMovementを
実装します

358
00:22:53,807 --> 00:22:57,778
現れたperspective
rotation translationの値を

359
00:22:57,878 --> 00:23:02,015
タイルのレンダリングに
適用します

360
00:22:57,878 --> 00:23:02,015
タイルのレンダリングに
適用します

361
00:23:03,217 --> 00:23:04,251
見てみましょう

362
00:23:10,224 --> 00:23:15,495
パッド上の指の動きに
タイルが反応しています

363
00:23:16,063 --> 00:23:19,600
まるでUIKitを
使用したかのような

364
00:23:19,766 --> 00:23:23,203
フォーカスの動きに
なりました

365
00:23:23,303 --> 00:23:24,605
では エイダに

366
00:23:24,805 --> 00:23:28,575
(拍手)

367
00:23:28,675 --> 00:23:29,943
ありがとう　ポール

368
00:23:30,577 --> 00:23:33,013
すばらしいデモでした

369
00:23:33,113 --> 00:23:38,185
少しコードを加えれば
Metalのインターフェースで

370
00:23:38,285 --> 00:23:44,024
スムーズなフォーカスの
動作が可能になります

371
00:23:44,124 --> 00:23:46,693
まるでネイティブ 
tvOSアプリケーションと同じです

372
00:23:47,394 --> 00:23:51,432
では紹介した機能を
振り返りましょう

373
00:23:52,065 --> 00:23:56,904
１つ目はUIFocusItemと
UIFocusEnvironmentの実装

374
00:23:57,004 --> 00:24:00,174
UIKitコンポーネントは
不要です

375
00:23:57,004 --> 00:24:00,174
UIKitコンポーネントは
不要です

376
00:24:00,674 --> 00:24:04,044
２つ目は
UIFocusItemContainer

377
00:24:04,144 --> 00:24:09,416
フォーカスの動作が
非常にスムーズになります

378
00:24:10,017 --> 00:24:12,553
３つ目は
UIFocusMovementHintの値

379
00:24:12,653 --> 00:24:17,090
Siri Remoteと連動した
インターフェースが出来ます

380
00:24:17,791 --> 00:24:21,295
４つ目は
UIFocusItemScrollableContainer

381
00:24:21,395 --> 00:24:26,767
スムーズで使いやすい
スクロール感覚を得られます

382
00:24:26,867 --> 00:24:32,539
最後はアクセシビリティの
サポートを紹介しました

383
00:24:32,639 --> 00:24:37,578
これらのプロトコルを適用し
必要な属性を与えれば

384
00:24:37,678 --> 00:24:40,480
誰でもアプリケーションを
楽しめます

385
00:24:40,981 --> 00:24:44,585
すべてDeveloperベータ版で
利用できます

386
00:24:44,685 --> 00:24:48,722
新機能の実装が
いかに手軽にできるか

387
00:24:48,822 --> 00:24:51,792
体感してもらえるでしょう

388
00:24:52,125 --> 00:24:55,229
それではハンスより tvOSの

389
00:24:55,329 --> 00:24:58,665
UIデザインパターンを
紹介します

390
00:24:58,766 --> 00:25:01,101
(拍手)

391
00:24:58,766 --> 00:25:01,101
(拍手)

392
00:25:01,201 --> 00:25:02,135
ありがとう　エイダ

393
00:25:04,671 --> 00:25:09,176
連動性を実感する上で
フォーカスは重要です

394
00:25:09,676 --> 00:25:13,714
tvOSには多くの
共通UIパターンがあります

395
00:25:14,314 --> 00:25:19,820
一例としてフォーカス時に
文字が動くラベルがあります

396
00:25:21,488 --> 00:25:25,058
流れる文字やアニメーション

397
00:25:25,159 --> 00:25:28,462
これらはラベルの
ジオメトリを変えず

398
00:25:28,562 --> 00:25:31,265
可変長文字列を表示できます

399
00:25:32,466 --> 00:25:37,805
また視覚的に強調する上でも
非常に効果的です

400
00:25:38,906 --> 00:25:44,878
これまでtvOSでは扱いにくい
ビヘイビアでしたが

401
00:25:45,045 --> 00:25:46,647
それは過去の話

402
00:25:47,514 --> 00:25:50,984
tvOS 12では
容易になりました

403
00:25:52,119 --> 00:25:54,354
新たなプロパティをセットし

404
00:25:54,822 --> 00:25:58,192
enablesMarqueeWhenAncestor
Focusedをtrueにするだけ

405
00:25:58,325 --> 00:26:02,029
(拍手)

406
00:25:58,325 --> 00:26:02,029
(拍手)

407
00:26:02,129 --> 00:26:05,666
これでフォーカスを
あててみます

408
00:26:05,799 --> 00:26:09,303
ラベルに収まりきらない
文字列でも―

409
00:26:11,805 --> 00:26:15,776
文字が横に移動しながら
表示されます

410
00:26:17,077 --> 00:26:22,583
このようなビヘイビアを
簡単にラベルに与えられます

411
00:26:23,317 --> 00:26:25,552
これは
テキストスクロールです

412
00:26:27,120 --> 00:26:31,859
tvOSには他にも
様々なパターンがあります

413
00:26:32,292 --> 00:26:35,696
例えば
フォーカス時の画像やラベル

414
00:26:38,065 --> 00:26:41,602
１つのユニットで
フロートするビュー階層

415
00:26:44,505 --> 00:26:48,075
好みの動作を
設定したボタンや―

416
00:26:50,844 --> 00:26:52,946
ウィジェットもあります

417
00:26:53,847 --> 00:26:58,986
これらのパターンはtvOSの
至る箇所に適用できます

418
00:26:59,152 --> 00:27:02,222
TVMLKitで
利用可能ですので

419
00:26:59,152 --> 00:27:02,222
TVMLKitで
利用可能ですので

420
00:27:02,322 --> 00:27:05,192
皆さんのアプリケーションも
対応します

421
00:27:06,193 --> 00:27:08,495
ではUIKitならどうでしょう

422
00:27:09,296 --> 00:27:13,967
tvOS 12ではUIKitベースの
アプリケーションでも

423
00:27:14,601 --> 00:27:18,338
利用できるパターンが
あります

424
00:27:18,438 --> 00:27:23,043
(拍手)

425
00:27:23,143 --> 00:27:27,181
新たに追加されたのが
TVUIKitです

426
00:27:29,149 --> 00:27:32,019
４つの要素を取り入れました

427
00:27:32,352 --> 00:27:33,287
ポスター

428
00:27:33,854 --> 00:27:35,189
キャプションボタン

429
00:27:35,722 --> 00:27:36,490
カード

430
00:27:37,157 --> 00:27:38,358
モノグラムです

431
00:27:39,259 --> 00:27:40,594
それぞれ紹介します

432
00:27:41,728 --> 00:27:43,530
まずはポスター

433
00:27:44,231 --> 00:27:48,368
TVPosterViewは
画像に特化した表示形式です

434
00:27:49,269 --> 00:27:52,873
フッターは
２つのラベルに分割

435
00:27:53,640 --> 00:27:55,475
フォーカスされると

436
00:27:55,709 --> 00:27:59,746
画像が拡大し
ラベルも同様に動きます

437
00:28:00,814 --> 00:28:05,485
フォーカスが外れると
元のサイズに戻ります

438
00:28:06,887 --> 00:28:09,289
画像をプログラムすれば

439
00:28:09,389 --> 00:28:12,926
適当なサイズで拡大されます

440
00:28:14,328 --> 00:28:18,699
簡単な操作で このような
インターフェースが

441
00:28:18,866 --> 00:28:20,100
作成できます

442
00:28:21,768 --> 00:28:23,537
TVPosterViewでした

443
00:28:24,638 --> 00:28:26,340
続いてキャプションボタン

444
00:28:27,241 --> 00:28:29,676
形式はCall To Actionです

445
00:28:32,045 --> 00:28:38,018
TVCaptionButtonViewは
ボタン型のビューになります

446
00:28:39,186 --> 00:28:42,589
フッターにはラベルが２つ

447
00:28:43,791 --> 00:28:49,530
コンテンツ部分には画像や
テキストなどが入ります

448
00:28:50,931 --> 00:28:55,402
フォーカスされると
フロート状態になります

449
00:28:56,203 --> 00:29:00,741
TVPosterViewとは異なり
拡大する方向は

450
00:28:56,203 --> 00:29:00,741
TVPosterViewとは異なり
拡大する方向は

451
00:29:00,841 --> 00:29:03,210
上部と左右だけです

452
00:29:04,812 --> 00:29:09,116
フロート時のモーションは
横揺れか―

453
00:29:09,683 --> 00:29:11,285
縦揺れにできます

454
00:29:12,820 --> 00:29:17,524
複数のボタンを作成し
共通のモーションを与えれば

455
00:29:17,791 --> 00:29:19,693
グループ分けも可能です

456
00:29:20,661 --> 00:29:23,297
TVCaptionButtonViewなら
簡単です

457
00:29:25,199 --> 00:29:27,100
次にカードです

458
00:29:28,802 --> 00:29:30,938
TVCardViewの形式は―

459
00:29:32,172 --> 00:29:37,211
任意に構成したビュー階層が
表示されます

460
00:29:39,546 --> 00:29:41,281
フォーカスが当たると

461
00:29:42,282 --> 00:29:48,622
コンテンツ部分とサブビューが
一体になってフロートします

462
00:29:51,425 --> 00:29:56,697
インターフェースは
このように仕上がります

463
00:29:59,199 --> 00:30:00,634
操作は簡単です

464
00:29:59,199 --> 00:30:00,634
操作は簡単です

465
00:30:02,102 --> 00:30:04,938
次はモノグラムです

466
00:30:06,707 --> 00:30:09,243
ユーザ表示に適しています

467
00:30:10,844 --> 00:30:15,215
TVMonogramViewは
画像を円形に表示します

468
00:30:15,582 --> 00:30:19,186
フッターはラベルが２つです

469
00:30:20,354 --> 00:30:24,024
ユーザ名や画像を
載せない場合

470
00:30:24,258 --> 00:30:27,327
一般的な
シルエットだけ出ます

471
00:30:29,029 --> 00:30:34,568
名前のみならイニシャルの
モノグラムが表示されます

472
00:30:36,970 --> 00:30:41,875
当然ながら画像は
そのまま反映されます

473
00:30:43,944 --> 00:30:46,547
フォーカスが当たると

474
00:30:47,281 --> 00:30:50,884
ラベルが下方に避け
画像は拡大します

475
00:30:52,953 --> 00:30:55,222
TVMonogramViewなら

476
00:30:55,889 --> 00:30:58,959
このような
インターフェースが出来ます

477
00:30:59,760 --> 00:31:04,398
４つの要素に共通する
パターンもあります

478
00:30:59,760 --> 00:31:04,398
４つの要素に共通する
パターンもあります

479
00:31:05,566 --> 00:31:08,202
メインとなるコンテンツに

480
00:31:09,103 --> 00:31:11,171
ヘッダーとフッターを
添えます

481
00:31:11,705 --> 00:31:15,976
フォーカス時は
ヘッダーとフッターが動き

482
00:31:16,076 --> 00:31:18,479
コンテンツ部分が拡大します

483
00:31:20,414 --> 00:31:25,352
基底クラスのTVLockupViewに
設定されています

484
00:31:27,254 --> 00:31:31,358
TVLockupViewで
カスタマイズしたビューは

485
00:31:31,959 --> 00:31:33,894
サイズが明確です

486
00:31:34,461 --> 00:31:37,898
レイアウトに
非常に役立ちます

487
00:31:39,967 --> 00:31:44,571
フォーカス時
ビューの拡大サイズに関して

488
00:31:45,672 --> 00:31:51,011
４方向それぞれに
異なる幅を指定できます

489
00:31:52,479 --> 00:31:55,816
TVCaptionButtonViewでも
可能です

490
00:31:59,153 --> 00:32:02,923
自身のコンテンツを
載せる場合

491
00:31:59,153 --> 00:32:02,923
自身のコンテンツを
載せる場合

492
00:32:03,123 --> 00:32:07,561
TVLockupViewComponentの
プロトコルが使えます

493
00:32:08,562 --> 00:32:10,898
TVLockupViewの
stateを変えると

494
00:32:10,998 --> 00:32:14,334
updateAppearanceが
呼び出されます

495
00:32:14,535 --> 00:32:17,404
全サブビューに適用されます

496
00:32:18,272 --> 00:32:21,742
サブビューの
ビヘイビアが更新され

497
00:32:21,842 --> 00:32:25,045
デザインの
カスタマイズも可能です

498
00:32:28,148 --> 00:32:33,387
フォーカスに反応する
ウィジェットも作成できます

499
00:32:33,587 --> 00:32:38,992
先ほどの４種のサブクラスも
カスタマイズ可能です

500
00:32:40,761 --> 00:32:43,297
TVLockupViewと
そのサブクラスでした

501
00:32:45,065 --> 00:32:48,469
最後に紹介するのが
こちらです

502
00:32:49,770 --> 00:32:55,676
このような画面の実装には
複雑な手順を要します

503
00:32:57,611 --> 00:33:03,484
しかしそれを容易にするのが
TVDigitEntryViewController

504
00:32:57,611 --> 00:33:03,484
しかしそれを容易にするのが
TVDigitEntryViewController

505
00:33:05,385 --> 00:33:09,289
これは全画面表示を
使用します

506
00:33:09,423 --> 00:33:13,093
タイトルや入力を促すラベル

507
00:33:13,927 --> 00:33:17,297
桁入力のビュー
キーボードが現れます

508
00:33:19,433 --> 00:33:23,036
この機能で
カスタマイズできるのは

509
00:33:23,437 --> 00:33:25,572
パスコードの桁数

510
00:33:26,440 --> 00:33:30,077
入力値が
正しいかどうかの判断

511
00:33:32,146 --> 00:33:35,616
数字を処理する
完了ハンドラです

512
00:33:36,817 --> 00:33:41,822
この機能に関しては
マーシャルがデモを行います

513
00:33:41,922 --> 00:33:47,060
(拍手)

514
00:33:48,295 --> 00:33:49,863
マーシャルです

515
00:33:49,963 --> 00:33:53,700
ご紹介するのは
TVDigitEntryViewController

516
00:33:53,801 --> 00:33:56,937
ユーザの数字データを
扱います

517
00:33:57,037 --> 00:34:01,408
今回 “Top Movies”という
アプリケーションを使います

518
00:33:57,037 --> 00:34:01,408
今回 “Top Movies”という
アプリケーションを使います

519
00:34:01,508 --> 00:34:05,045
コンテンツの適性は
人それぞれ

520
00:34:05,145 --> 00:34:10,650
そこでPINコードを使い
視聴者を制限します

521
00:34:10,984 --> 00:34:16,023
TVPosterViewを使った
コレクションビューです

522
00:34:16,889 --> 00:34:21,628
didSelectItemAt indexPathが
このビューのコードです

523
00:34:21,728 --> 00:34:25,799
TVDigitEntryViewControllerを
用意し

524
00:34:25,899 --> 00:34:31,605
５桁のパスコードを要求する
テキストに設定します

525
00:34:32,005 --> 00:34:33,873
桁数は５とします

526
00:34:33,974 --> 00:34:38,579
パスコードを扱うため
isSecureはtrueにセット

527
00:34:40,114 --> 00:34:43,583
次に実装するのが
entryCompletionHandlerです

528
00:34:44,051 --> 00:34:50,257
ユーザがビューに入力を
終えると文字列を返します

529
00:34:50,791 --> 00:34:54,628
今回は５桁すべてを
１に設定します

530
00:34:54,728 --> 00:34:58,365
入力が正しければ
View Controllerが外れ

531
00:34:58,465 --> 00:35:02,669
間違いなら無効だと
ユーザに伝えます

532
00:34:58,465 --> 00:35:02,669
間違いなら無効だと
ユーザに伝えます

533
00:35:02,770 --> 00:35:05,672
clearEntryのanimatedを
trueにすると

534
00:35:05,772 --> 00:35:11,712
入力された数字が消え
エラーを示すことができます

535
00:35:12,379 --> 00:35:14,481
最後に
View Controllerですが

536
00:35:14,581 --> 00:35:19,052
表示形式の
カスタマイズが可能です

537
00:35:19,153 --> 00:35:24,057
昨年に紹介した
blurOverFullScreenを使います

538
00:35:25,426 --> 00:35:27,127
では実行してみます

539
00:35:28,095 --> 00:35:30,130
映画を選択します

540
00:35:30,230 --> 00:35:34,968
背景がぼやけて
パスコードが求められます

541
00:35:35,335 --> 00:35:40,007
正しくは５桁すべて１ですが
２にしてみます

542
00:35:40,407 --> 00:35:43,710
枠が揺れ
入力値が消えました

543
00:35:44,111 --> 00:35:46,480
では１を入力します

544
00:35:46,914 --> 00:35:51,018
View Controllerが外れ
視聴可能になりました

545
00:35:52,386 --> 00:35:57,124
ユーザ自身が
パスコードを設定したい場合

546
00:35:57,224 --> 00:36:02,830
設定ボタンから行えるように
調整が可能です

547
00:35:57,224 --> 00:36:02,830
設定ボタンから行えるように
調整が可能です

548
00:36:03,297 --> 00:36:05,499
IBActionをセットします

549
00:36:05,899 --> 00:36:09,703
TVDigitEntryViewControllerを
再び用意

550
00:36:09,837 --> 00:36:12,539
タイトルテキストには

551
00:36:12,639 --> 00:36:16,410
視聴制限のための
パスコード要求をセット

552
00:36:16,510 --> 00:36:18,378
桁数は５にします

553
00:36:19,313 --> 00:36:23,250
entryCompletionHandlerを
再び実装します

554
00:36:23,350 --> 00:36:28,155
するとオプショナル変数
passcodeToVerifyが現れます

555
00:36:28,255 --> 00:36:33,193
１回目にユーザが入力した
パスコードは維持され

556
00:36:33,293 --> 00:36:37,197
再入力のパスコードと
照合できます

557
00:36:37,397 --> 00:36:40,100
完了ハンドラが
呼び出された時

558
00:36:40,500 --> 00:36:42,703
passcodeToVerifyが
nilか確認

559
00:36:42,803 --> 00:36:48,175
１回目ならユーザに
パスコードの確認を促します

560
00:36:48,275 --> 00:36:52,146
clearEntryのanimatedは
falseにします

561
00:36:52,246 --> 00:36:56,884
揺れがなくなり
入力値だけが消えます

562
00:36:57,151 --> 00:37:00,087
passcodeToVerifyに
値があれば

563
00:36:57,151 --> 00:37:00,087
passcodeToVerifyに
値があれば

564
00:37:00,187 --> 00:37:03,190
ユーザが確認中だと
分かります

565
00:37:03,290 --> 00:37:07,361
パスコードが正しければ
保存します

566
00:37:07,461 --> 00:37:12,399
間違いなら指示テキストを
リセットして入力値をクリア

567
00:37:12,499 --> 00:37:15,802
改めてパスコード入力を
要求します

568
00:37:15,903 --> 00:37:18,238
あとはView Controllerの
調整です

569
00:37:21,909 --> 00:37:25,512
設定を押すと
新規パスコードが要求され

570
00:37:25,612 --> 00:37:29,449
数字を入力後
確認に移ります

571
00:37:29,750 --> 00:37:31,618
全部２にします

572
00:37:32,019 --> 00:37:35,823
正しくないので
再入力が必要です

573
00:37:36,256 --> 00:37:39,226
PINコードを保存すれば

574
00:37:39,326 --> 00:37:42,562
ユーザは必要に応じて
設定できます

575
00:37:43,397 --> 00:37:47,734
TVDigitEntryViewControllerの
実装手順は以上です

576
00:37:47,935 --> 00:37:49,603
ではハンスに代わります

577
00:37:49,703 --> 00:37:52,706
(拍手)

578
00:37:52,806 --> 00:37:54,041
ありがとう　マーシャル

579
00:37:55,275 --> 00:38:00,714
TVUIKitの共通UIパターンを
デモで紹介しました

580
00:37:55,275 --> 00:38:00,714
TVUIKitの共通UIパターンを
デモで紹介しました

581
00:38:02,516 --> 00:38:08,722
TVUIKitには右横書きなど
ローカライズ機能もあります

582
00:38:09,022 --> 00:38:10,758
アクセシビリティにも対応

583
00:38:11,391 --> 00:38:15,729
Developerベータ版を
ダウンロードして

584
00:38:15,896 --> 00:38:17,731
ぜひ お試しください

585
00:38:18,499 --> 00:38:21,535
皆さんの時間や
リソースも節約され

586
00:38:21,635 --> 00:38:24,137
アプリケーションが
充実します

587
00:38:25,739 --> 00:38:27,241
TVUIKitは以上です

588
00:38:29,143 --> 00:38:32,579
本日はtvOS 12に
備わった新機能を

589
00:38:32,679 --> 00:38:36,083
項目別にご紹介しました

590
00:38:37,317 --> 00:38:40,954
アプリケーションの
サインインを手軽にする―

591
00:38:41,054 --> 00:38:43,190
パスワードの自動入力

592
00:38:43,924 --> 00:38:47,561
強いパスワードなら
より役立ちます

593
00:38:49,229 --> 00:38:54,535
次にレンダリングの仕組みに
関わらず拡張できる―

594
00:38:54,635 --> 00:38:56,904
tvOSのフォーカスエンジン

595
00:38:57,404 --> 00:38:59,039
非常に革新的です

596
00:39:00,674 --> 00:39:03,243
最後はTVUIKitです

597
00:39:03,344 --> 00:39:07,681
共通UIパターンを
ご覧いただきました

598
00:39:09,616 --> 00:39:14,321
さらに詳しい情報は
セッションページをどうぞ

599
00:39:14,555 --> 00:39:19,226
またtvOSや
Safari WebKitのラボでも

600
00:39:19,359 --> 00:39:22,262
質問を受け付けています

601
00:39:22,562 --> 00:39:26,533
本日はご来場
ありがとうございました