
1
00:00:07,107 --> 00:00:16,082
(音楽)

2
00:00:21,288 --> 00:00:22,589
こんにちは

3
00:00:22,689 --> 00:00:27,160
(拍手)

4
00:00:27,261 --> 00:00:30,163
“App内課金のベスト
プラクティスと新機能”です

5
00:00:30,264 --> 00:00:33,834
App Store技術マネージャー
デイナ･デュボイスです

6
00:00:34,368 --> 00:00:39,673
App内課金はApp Storeに
欠かせません

7
00:00:39,773 --> 00:00:42,276
動画配信 新聞や雑誌など―

8
00:00:42,376 --> 00:00:45,913
定期購読モデルの
サービスがあります

9
00:00:46,013 --> 00:00:48,482
消耗型のサービスでは―

10
00:00:48,582 --> 00:00:52,586
ゲーム内通貨などが
何度も購入できます

11
00:00:52,686 --> 00:00:57,824
一度 購入すればいい
非消耗型のサービスもあります

12
00:00:58,158 --> 00:01:01,628
いずれにしろ
快適なユーザ体験が―

13
00:00:58,158 --> 00:01:01,628
いずれにしろ
快適なユーザ体験が―

14
00:01:02,262 --> 00:01:04,397
何よりも重要です

15
00:01:05,364 --> 00:01:10,070
そのためのベストプラクティスを
紹介します

16
00:01:10,170 --> 00:01:15,609
我々の側で加えた
機能改善にも触れる予定です

17
00:01:18,512 --> 00:01:21,348
最初に
同僚のロスを呼んで―

18
00:01:21,448 --> 00:01:24,985
お試し価格を
説明してもらいます

19
00:01:25,085 --> 00:01:29,323
新規顧客を
呼び込める新しい機能です

20
00:01:29,823 --> 00:01:33,293
次に私が“トライアル”を
説明します

21
00:01:34,361 --> 00:01:38,232
“評価とレビュー”では
レビューを得る方法を―

22
00:01:38,332 --> 00:01:40,200
ご説明しましょう

23
00:01:41,101 --> 00:01:45,973
次にSandbox環境における
App内課金のテスト方法を

24
00:01:46,073 --> 00:01:48,275
説明する予定です

25
00:01:49,009 --> 00:01:51,111
そして再びロスが―

26
00:01:51,211 --> 00:01:55,315
“トランザクション処理の
ベストプラクティス”を説明します

27
00:01:56,517 --> 00:02:00,621
最後に“レシート”の概要を
私が説明します

28
00:01:56,517 --> 00:02:00,621
最後に“レシート”の概要を
私が説明します

29
00:02:01,622 --> 00:02:04,758
それではロスを呼びましょう

30
00:02:04,858 --> 00:02:06,960
(拍手)

31
00:02:07,060 --> 00:02:07,961
どうも

32
00:02:09,663 --> 00:02:12,866
iOS 11.2と
macOS 10.13.2から―

33
00:02:12,966 --> 00:02:16,537
お試し価格機能を
導入しました

34
00:02:17,070 --> 00:02:20,474
１回限りの割引価格を
作成できます

35
00:02:21,408 --> 00:02:23,810
App Store Connectでは―

36
00:02:24,811 --> 00:02:28,682
１回限りのお試し価格を
設定できます

37
00:02:29,183 --> 00:02:32,085
ユーザが定期購読を
購入すると―

38
00:02:32,953 --> 00:02:35,689
割引価格が自動適用されます

39
00:02:36,456 --> 00:02:40,661
定期購読グループに基づき
１回だけです

40
00:02:40,761 --> 00:02:42,329
詳細は後ほど

41
00:02:44,031 --> 00:02:48,235
Introductory Pricing APIと共に
新型とプロパティを追加

42
00:02:49,369 --> 00:02:52,406
App Store Connectで
設定したデータを使えば―

43
00:02:53,207 --> 00:02:58,011
ユーザに定期購読の
使用条件を表示できます

44
00:02:58,645 --> 00:03:02,482
適用対象のユーザも
判別できます

45
00:02:58,645 --> 00:03:02,482
適用対象のユーザも
判別できます

46
00:03:04,117 --> 00:03:04,952
例えば―

47
00:03:05,919 --> 00:03:07,387
お試し価格は

48
00:03:07,487 --> 00:03:10,791
App Storeで
このように表示されます

49
00:03:11,692 --> 00:03:16,063
自然なレイアウトで
条件の内容も明確です

50
00:03:16,396 --> 00:03:20,634
初年度は19.99ドル
以降は年間39.99ドル

51
00:03:21,835 --> 00:03:25,472
App内課金を
促進する有効な手段です

52
00:03:25,572 --> 00:03:28,208
インストール前に
値段が分かります

53
00:03:29,877 --> 00:03:34,848
ではお試し価格の
設定方法を説明します

54
00:03:37,784 --> 00:03:40,754
SKProductの
新規プロパティは―

55
00:03:40,854 --> 00:03:43,790
introductoryPriceです

56
00:03:44,458 --> 00:03:47,027
新規クラス
SKProductDiscountには―

57
00:03:47,594 --> 00:03:50,831
設定した情報がすべて
含まれます

58
00:03:51,665 --> 00:03:56,336
お試し価格は定期購読の
必須項目ではないので―

59
00:03:56,436 --> 00:03:58,272
任意のプロパティです

60
00:03:59,373 --> 00:04:01,241
SKProductDiscountには―

61
00:03:59,373 --> 00:04:01,241
SKProductDiscountには―

62
00:04:03,911 --> 00:04:08,582
お試し価格の
設定データが反映されます

63
00:04:09,516 --> 00:04:11,818
価格と価格ロケールは―

64
00:04:11,919 --> 00:04:15,756
SKProductのプロパティと
同じです

65
00:04:17,925 --> 00:04:23,430
定期購読期間は
SKProductSubscriptionPeriodで

66
00:04:24,064 --> 00:04:28,302
請求と更新期間のデータが
反映されます

67
00:04:29,469 --> 00:04:31,605
２つのプロパティがあり―

68
00:04:32,139 --> 00:04:36,176
１つ目は単位で
年月日週を表すenumです

69
00:04:37,477 --> 00:04:40,514
２つ目は単位数になります

70
00:04:41,682 --> 00:04:45,252
単位が月で
単位数が２の場合は―

71
00:04:45,419 --> 00:04:48,155
２カ月ごとの更新です

72
00:04:50,424 --> 00:04:54,027
SKProductDiscountの
numberOfPeriodsには―

73
00:04:54,928 --> 00:04:58,966
お試し価格の
有効期間が反映されます

74
00:04:59,633 --> 00:05:03,470
お試し価格が２カ月で
期間が３の場合―

75
00:04:59,633 --> 00:05:03,470
お試し価格が２カ月で
期間が３の場合―

76
00:05:03,570 --> 00:05:06,540
有効期間は合計半年間です

77
00:05:10,043 --> 00:05:14,681
SKProductDiscountの
支払モードプロパティは―

78
00:05:15,249 --> 00:05:18,051
３つの値を持つenumです

79
00:05:19,119 --> 00:05:20,787
１つ目はpayAsYouGo

80
00:05:21,655 --> 00:05:25,926
ユーザは更新期間ごとに
料金を払います

81
00:05:27,294 --> 00:05:29,363
ベースの定期購読と―

82
00:05:29,463 --> 00:05:33,066
更新期間を
同じにしてください

83
00:05:33,200 --> 00:05:36,270
１カ月間の
定期購読の場合―

84
00:05:36,370 --> 00:05:39,373
お試し価格は
２週間にできません

85
00:05:40,874 --> 00:05:43,877
この種類を使うと
ユーザに―

86
00:05:43,977 --> 00:05:47,347
長めの導入期間を
提供できます

87
00:05:48,315 --> 00:05:50,918
例えば定期購読料金が―

88
00:05:51,018 --> 00:05:55,222
３カ月間で
9.99ドルだとします

89
00:05:55,823 --> 00:06:00,861
1.99ドルで２回更新する
半年間の設定が可能です

90
00:05:55,823 --> 00:06:00,861
1.99ドルで２回更新する
半年間の設定が可能です

91
00:06:02,262 --> 00:06:04,398
請求期間はこうです

92
00:06:04,832 --> 00:06:07,935
ユーザは
お試し価格1.99ドルで―

93
00:06:08,035 --> 00:06:11,338
３カ月間の定期購読を
購入します

94
00:06:11,738 --> 00:06:15,909
その後に再度
1.99ドルで更新します

95
00:06:17,344 --> 00:06:21,081
次は３カ月で9.99ドルの
通常価格で更新

96
00:06:23,650 --> 00:06:26,053
StoreKitのデータです

97
00:06:26,787 --> 00:06:29,423
単位は月で単位数は３

98
00:06:29,857 --> 00:06:32,759
つまり３カ月ごとの更新です

99
00:06:33,360 --> 00:06:36,864
numberOfPeriodsが２で
半年間

100
00:06:38,198 --> 00:06:42,669
支払いモードがpayAsYouGo
価格は1.99です

101
00:06:45,906 --> 00:06:48,275
２つ目はpayUpFront

102
00:06:49,710 --> 00:06:54,648
お試し期間の間は
支払いは１回のみです

103
00:06:55,782 --> 00:06:59,019
更新期間に縛られず
設定できます

104
00:06:59,119 --> 00:07:02,122
定期購読の更新が
１年ごとでも―

105
00:06:59,119 --> 00:07:02,122
定期購読の更新が
１年ごとでも―

106
00:07:02,756 --> 00:07:04,925
１カ月に設定できます

107
00:07:07,060 --> 00:07:11,431
先ほどの例は
３カ月ごとの自動更新ですが

108
00:07:12,633 --> 00:07:16,170
今回は半年間の
payUpFrontです

109
00:07:18,038 --> 00:07:22,709
価格は3.99ドルで
前の例とほぼ同じですが―

110
00:07:22,809 --> 00:07:26,313
前払いで
半年の購読期間を得ます

111
00:07:27,514 --> 00:07:32,886
その後の更新は３カ月ごとで
9.99ドルの通常価格です

112
00:07:35,789 --> 00:07:38,091
StoreKitのデータです

113
00:07:38,358 --> 00:07:42,362
subscriptionPeriodは月で
単位数は６

114
00:07:42,596 --> 00:07:46,500
payUpFrontなので
numberOfPeriodsは１です

115
00:07:51,205 --> 00:07:53,340
３つ目はfreeTrialです

116
00:07:54,308 --> 00:07:59,513
無料でお試し期間を
得られる支払いモードです

117
00:08:00,414 --> 00:08:04,251
３日間から１年間まで
設定できます

118
00:08:08,055 --> 00:08:08,956
失礼

119
00:08:10,624 --> 00:08:13,627
iOS 12と
macOS 10.13.2では―

120
00:08:14,761 --> 00:08:17,965
subscriptionPeriodを
追加しました

121
00:08:18,866 --> 00:08:24,538
すべての自動更新可能な
定期購読にアクセスできます

122
00:08:26,540 --> 00:08:29,176
またiOS 12と
macOS 10.14では―

123
00:08:29,476 --> 00:08:32,546
subscriptionGroupIdentifierを
追加しました

124
00:08:34,414 --> 00:08:40,154
お試し価格の適用資格は
定期購読グループが基準です

125
00:08:41,121 --> 00:08:45,159
お試し価格は
グループごとに１回です

126
00:08:46,159 --> 00:08:49,930
定期購読グループは
同じコンテンツを―

127
00:08:50,030 --> 00:08:52,366
異なる更新期間で提供します

128
00:08:52,466 --> 00:08:57,137
多くのアプリケーションには
年間と月間オプションがあり

129
00:08:57,237 --> 00:08:59,540
年間だと少し安くなります

130
00:09:00,440 --> 00:09:04,144
お試し価格を月間と
年間で受けても―

131
00:09:04,244 --> 00:09:06,480
コンテンツは同じです

132
00:09:09,683 --> 00:09:13,720
お試し価格は購入時に
自動適用されるため―

133
00:09:13,820 --> 00:09:18,225
ユーザの適用資格判定が
重要になります

134
00:09:19,059 --> 00:09:20,961
適用資格の詳細は―

135
00:09:21,728 --> 00:09:25,566
この後 ３時からの
セッションへどうぞ

136
00:09:27,434 --> 00:09:32,306
これらの新規APIで
設定にアクセスできるので

137
00:09:32,606 --> 00:09:37,044
サーバーコードを更新せずに
変更を反映できます

138
00:09:38,712 --> 00:09:42,449
デイナを呼び
補足を頼みましょう

139
00:09:44,084 --> 00:09:47,421
(拍手)

140
00:09:47,521 --> 00:09:48,622
ありがとう

141
00:09:49,590 --> 00:09:54,361
定期購読ビジネスモデルでは
お試し価格は－－

142
00:09:54,828 --> 00:09:56,797
顧客獲得に有効です

143
00:09:57,598 --> 00:10:03,370
では定期購読に向いていない
アプリケーションの場合は？

144
00:09:57,598 --> 00:10:03,370
では定期購読に向いていない
アプリケーションの場合は？

145
00:10:03,904 --> 00:10:06,206
今日から
非定期購読型でも―

146
00:10:06,807 --> 00:10:11,378
無料トライアルを
提供することができます

147
00:10:12,045 --> 00:10:15,816
購入せずに
試すことができるのです

148
00:10:17,384 --> 00:10:18,886
その方法は？

149
00:10:19,720 --> 00:10:23,323
App StoreでpayUpFrontを―

150
00:10:24,358 --> 00:10:26,426
無料に設定します

151
00:10:26,927 --> 00:10:30,464
次に非消耗型のApp内課金を
追加してロック解除

152
00:10:30,564 --> 00:10:33,967
つまりアプリケーションが
9.99ドルなら―

153
00:10:34,067 --> 00:10:37,538
同額の非消耗型の
App内課金を作成します

154
00:10:38,472 --> 00:10:42,176
トライアルの開始は
ユーザが決めます

155
00:10:42,276 --> 00:10:45,445
このため２つ目の
非消耗型のApp内課金を―

156
00:10:45,779 --> 00:10:49,249
“price tier 0”で
作成してください

157
00:10:49,349 --> 00:10:51,552
これをユーザが―

158
00:10:52,019 --> 00:10:55,322
トライアル期間に使用します

159
00:10:56,490 --> 00:10:59,993
無料の非消耗型サービスの
命名規則では―

160
00:11:00,093 --> 00:11:03,897
無料期間の詳細を
明示する必要があります

161
00:11:03,997 --> 00:11:06,767
この例では
“14-day Trial”です

162
00:11:08,101 --> 00:11:12,339
ユーザには
無料トライアルの開始前に

163
00:11:13,106 --> 00:11:16,176
UIで期間を表示しましょう

164
00:11:17,177 --> 00:11:21,949
トライアル終了時の
ロック解除料金も示します

165
00:11:22,349 --> 00:11:26,687
トライアル期間の終了時に
完全ロック解除しない場合―

166
00:11:26,787 --> 00:11:31,225
失われる機能と
コンテンツも明示します

167
00:11:31,325 --> 00:11:33,594
必ず事前に知らせます

168
00:11:33,994 --> 00:11:36,096
概要は以上ですが―

169
00:11:36,196 --> 00:11:40,601
実装方法は
レシートの項目で説明します

170
00:11:41,935 --> 00:11:43,136
それでは―

171
00:11:44,204 --> 00:11:48,075
評価とレビューの説明に
移ります

172
00:11:48,909 --> 00:11:51,311
App内課金の有無に
関わらず―

173
00:11:51,411 --> 00:11:55,716
ユーザのフィードバックは
気になります

174
00:11:55,816 --> 00:12:00,154
App StoreとStoreKitを
活用しましょう

175
00:11:55,816 --> 00:12:00,154
App StoreとStoreKitを
活用しましょう

176
00:12:01,321 --> 00:12:06,360
SKStoreReviewControllerを
iOS 10.3で導入しました

177
00:12:06,460 --> 00:12:09,496
このパワフルなAPIを
使えば―

178
00:12:09,696 --> 00:12:14,268
簡単なプロンプトが表示され
評価を選べます

179
00:12:14,368 --> 00:12:17,838
レビューの入力も
簡単になります

180
00:12:18,572 --> 00:12:22,509
ただしパワーには
制約がつきものです

181
00:12:22,976 --> 00:12:27,748
まず このプロンプトは
アプリケーションとデバイスごとに

182
00:12:27,848 --> 00:12:31,652
また年間の
表示回数が制限されます

183
00:12:32,820 --> 00:12:37,191
次にユーザは
App Storeの設定で―

184
00:12:37,291 --> 00:12:40,327
プロンプトを
非表示にできます

185
00:12:41,295 --> 00:12:43,931
この２点に注意しましょう

186
00:12:44,464 --> 00:12:48,035
そのうえで
いつ表示するべきか―

187
00:12:48,135 --> 00:12:51,538
いくつかの戦略を
考えていきます

188
00:12:52,306 --> 00:12:55,509
まず大事なのは遮らないこと

189
00:12:56,176 --> 00:13:00,914
ユーザがレベルの最後で
ボスと戦闘中なら―

190
00:12:56,176 --> 00:13:00,914
ユーザがレベルの最後で
ボスと戦闘中なら―

191
00:13:01,014 --> 00:13:05,519
終わるのを待って
レビューを頼みましょう

192
00:13:07,020 --> 00:13:08,755
またユーザが―

193
00:13:08,856 --> 00:13:13,560
アプリケーションに慣れ
好感を得るまで待ちます

194
00:13:13,660 --> 00:13:16,964
ポジティブな体験も
待ちましょう

195
00:13:17,064 --> 00:13:21,802
ボスと戦い終わり
注文した食料が届くまで―

196
00:13:21,902 --> 00:13:24,004
待つ方がいいでしょう

197
00:13:25,172 --> 00:13:30,010
プロンプトの表示回数は
アプリケーション デバイス

198
00:13:30,110 --> 00:13:35,182
年間で制限されますが
評価自体は制限されません

199
00:13:35,716 --> 00:13:40,988
SKStoreReviewControllerを
３回呼び出すと―

200
00:13:41,088 --> 00:13:45,359
“後で”をクリックしても
３回表示されます

201
00:13:45,459 --> 00:13:48,795
評価の表示回数制限は
任意です

202
00:13:49,396 --> 00:13:51,064
コードを表示します

203
00:13:51,798 --> 00:13:53,467
前述したように―

204
00:13:54,201 --> 00:13:58,272
StoreReviewControllerは
各自の判断でどうぞ

205
00:13:58,372 --> 00:14:02,776
ユーザのプレイを
邪魔していないか―

206
00:13:58,372 --> 00:14:02,776
ユーザのプレイを
邪魔していないか―

207
00:14:03,076 --> 00:14:05,445
確認してください

208
00:14:05,646 --> 00:14:11,018
最近 ポジティブな体験を
したかどうかも確認します

209
00:14:11,118 --> 00:14:13,053
すべて確認したら―

210
00:14:13,153 --> 00:14:17,658
SKStoreReviewController.
requestReviewを呼び出します

211
00:14:17,758 --> 00:14:22,729
入出力もありません
シンプルなAPIです

212
00:14:23,697 --> 00:14:27,801
デベロッパから
大反響がありました

213
00:14:28,068 --> 00:14:29,670
紹介しましょう

214
00:14:30,103 --> 00:14:32,206
Zappos社の感想です

215
00:14:32,306 --> 00:14:37,611
SKStoreReviewControllerで
レビューが10倍に増え―

216
00:14:37,711 --> 00:14:42,482
顧客満足度について
確信が持てたそうです

217
00:14:42,783 --> 00:14:45,652
Frosty Pop社は
Kingpin Bowlingや―

218
00:14:45,752 --> 00:14:49,056
Ninja Attackなどの
ゲームで有名です

219
00:14:49,156 --> 00:14:53,427
App Storeでの認知度が
上がり―

220
00:14:53,660 --> 00:14:55,863
サンプルサイズが大きくなり

221
00:14:55,963 --> 00:15:00,300
おかげで熱心なユーザが
増えたと言います

222
00:14:55,963 --> 00:15:00,300
おかげで熱心なユーザが
増えたと言います

223
00:15:01,869 --> 00:15:06,206
ですから自社製プロンプトを
使うより―

224
00:15:06,306 --> 00:15:10,244
SKStoreReviewControllerに
移行しましょう

225
00:15:11,011 --> 00:15:13,547
大きな差が生まれます

226
00:15:16,450 --> 00:15:21,588
昨日 発表したとおり
App Storeが一新されました

227
00:15:21,688 --> 00:15:25,826
皆さんの意欲も
新たに湧くと思います

228
00:15:25,926 --> 00:15:28,228
そこで我々は新しく―

229
00:15:28,328 --> 00:15:32,966
レビュー記入用のAPIを
Mojaveから導入します

230
00:15:33,400 --> 00:15:36,904
(拍手)

231
00:15:37,004 --> 00:15:40,674
レビューを
記入してもらう方法は―

232
00:15:40,874 --> 00:15:43,010
いくつか説明しました

233
00:15:44,178 --> 00:15:48,782
App Storeにリンクを
張るのも手です

234
00:15:49,183 --> 00:15:53,754
iOS 10.3に続いて
Macにも今年導入します

235
00:15:54,721 --> 00:16:00,093
製品ページにリンクすると
レビューシートが表示され

236
00:15:54,721 --> 00:16:00,093
製品ページにリンクすると
レビューシートが表示され

237
00:16:00,194 --> 00:16:02,362
レビューを書き込めます

238
00:16:02,629 --> 00:16:06,700
SKStoreReviewControllerの
代替手段で

239
00:16:06,800 --> 00:16:11,538
ユーザに操作を
求める現行UIより簡単です

240
00:16:11,872 --> 00:16:17,177
例えばアプリケーション内の
設定ページのボタンで―

241
00:16:17,277 --> 00:16:19,479
レビューを依頼できます

242
00:16:19,646 --> 00:16:23,517
製品ページへのリンクを
使いましょう

243
00:16:24,017 --> 00:16:27,454
方法はきわめてシンプルです

244
00:16:28,155 --> 00:16:32,693
製品ページURLの末尾に
“action=write-review”を加え

245
00:16:32,793 --> 00:16:36,196
レビューシートを表示します

246
00:16:36,330 --> 00:16:41,502
各自の製品URLの取得方法が
分からない場合は―

247
00:16:41,735 --> 00:16:46,140
linkmaker.itunes.apple.comへ
どうぞ

248
00:16:46,406 --> 00:16:49,610
ユーザレビューへの
対応方法など―

249
00:16:49,710 --> 00:16:53,447
評価とレビュー情報を
参照できます

250
00:16:55,949 --> 00:17:00,287
次にSandboxの詳細について
説明します

251
00:16:55,949 --> 00:17:00,287
次にSandboxの詳細について
説明します

252
00:17:00,888 --> 00:17:03,323
ここで言うSandboxは―

253
00:17:03,624 --> 00:17:09,061
アプリケーションの
Sandboxとは異なります

254
00:17:09,162 --> 00:17:12,665
そのSandboxは
OSの一部であり―

255
00:17:12,766 --> 00:17:14,968
アクセスを制限します

256
00:17:15,068 --> 00:17:19,839
ここで説明するSandboxは
環境のことです

257
00:17:19,940 --> 00:17:24,811
サーバ側のApp Store
商用エンジンのコピーで―

258
00:17:24,912 --> 00:17:27,214
App内課金テスト用です

259
00:17:28,682 --> 00:17:32,152
StoreKitは
署名に基づいて―

260
00:17:32,252 --> 00:17:34,421
Sandbox環境に変わります

261
00:17:34,755 --> 00:17:40,227
例えばXcodeでの作業中に
証明書でサインインすると

262
00:17:40,527 --> 00:17:45,165
StoreKitは要求を
Sandbox環境に送ります

263
00:17:46,466 --> 00:17:51,705
ユーザがApp Storeから
Appをダウンロードすると

264
00:17:51,839 --> 00:17:55,843
StoreKitは
通常の本番環境に移行します

265
00:17:56,844 --> 00:18:00,214
Sandbox環境の特徴は？

266
00:17:56,844 --> 00:18:00,214
Sandbox環境の特徴は？

267
00:18:01,014 --> 00:18:05,385
まずテスト環境なので
課金が発生しません

268
00:18:05,686 --> 00:18:09,423
テストでの課金は
無意味ですから

269
00:18:10,124 --> 00:18:12,226
２つ目の特徴です

270
00:18:12,326 --> 00:18:16,463
デベロッパは
App Store Connectで―

271
00:18:16,630 --> 00:18:20,834
Sandbox環境用の
専用アカウントを作ります

272
00:18:20,934 --> 00:18:24,004
App内課金アカウントとは
別です

273
00:18:25,239 --> 00:18:28,675
また完全に別の
バックエンド環境なので―

274
00:18:28,776 --> 00:18:34,581
URLはレシート検証時とは
完全に別のURLになります

275
00:18:34,681 --> 00:18:36,850
ここは重要な点です

276
00:18:36,950 --> 00:18:41,722
開発テストレシートを
QAサーバに送り―

277
00:18:41,822 --> 00:18:46,727
verifyReceiptエンドポイントに
渡す場合です

278
00:18:47,261 --> 00:18:49,396
後ほど説明します

279
00:18:50,397 --> 00:18:53,433
StoreKitには
テストモードもあります

280
00:18:53,534 --> 00:18:57,604
例えば
SKReceiptRefreshRequestで

281
00:18:57,704 --> 00:19:01,442
期限切れレシートを
取得する引数を使えます

282
00:18:57,704 --> 00:19:01,442
期限切れレシートを
取得する引数を使えます

283
00:19:01,542 --> 00:19:07,181
つまり期限切れレシートの
テストができるのです

284
00:19:08,382 --> 00:19:12,152
また子供が親に
App内課金を頼んだ場合―

285
00:19:12,252 --> 00:19:16,223
何が起きるかも
シミュレートできます

286
00:19:16,657 --> 00:19:19,326
simulatesAskToBuyInSandboxです

287
00:19:20,961 --> 00:19:26,200
一番大きな違いは
App内定期購読の処理です

288
00:19:26,300 --> 00:19:29,570
自動更新までを追跡できます

289
00:19:29,736 --> 00:19:32,339
年間定期購読の場合は―

290
00:19:32,539 --> 00:19:37,911
１年間待って更新を
テストするわけにいきません

291
00:19:38,979 --> 00:19:40,881
一般的な目安として―

292
00:19:40,981 --> 00:19:45,452
１年間は
Sandboxでは１時間です

293
00:19:46,153 --> 00:19:50,490
１カ月間の定期購読なら
５分間になります

294
00:19:51,925 --> 00:19:56,497
自動更新の数は５つまでに
制限されます

295
00:19:56,597 --> 00:20:00,367
つまり最初に
定期購読を購入すると―

296
00:19:56,597 --> 00:20:00,367
つまり最初に
定期購読を購入すると―

297
00:20:00,467 --> 00:20:06,006
５つの自動更新が自動的に
始まって終わります

298
00:20:06,106 --> 00:20:07,641
これはユーザが―

299
00:20:07,741 --> 00:20:12,746
定期購読を無効にした場合の
シミュレーションです

300
00:20:12,846 --> 00:20:17,684
つまりユーザの意思で
やめる場合のことです

301
00:20:20,220 --> 00:20:25,092
この状況を設定するには
App Store Connectで―

302
00:20:25,259 --> 00:20:26,793
ユーザを作成します

303
00:20:28,095 --> 00:20:30,497
製品も作成しましょう

304
00:20:30,597 --> 00:20:34,501
これらの情報を
サーバに置いてから―

305
00:20:35,402 --> 00:20:38,672
XcodeでAppを構築して
署名します

306
00:20:39,106 --> 00:20:42,042
アプリケーションを起動して
製品を探し―

307
00:20:42,242 --> 00:20:45,913
Sandboxアカウントで
サインインします

308
00:20:47,881 --> 00:20:50,884
ここで疑問を覚えるでしょう

309
00:20:52,085 --> 00:20:57,991
“本番アプリケーションや
Storeにサインイン済みだ”

310
00:20:58,158 --> 00:21:01,061
“先に
サインアウトすべきでは？”と

311
00:20:58,158 --> 00:21:01,061
“先に
サインアウトすべきでは？”と

312
00:21:01,795 --> 00:21:04,832
iOS 12からは必要ありません

313
00:21:05,265 --> 00:21:11,472
(拍手)

314
00:21:11,572 --> 00:21:13,974
本番用とSandboxで―

315
00:21:14,074 --> 00:21:17,611
アカウントを
画面下部で分けました

316
00:21:17,711 --> 00:21:22,382
証明書で使う環境を
区別するのと同様です

317
00:21:22,483 --> 00:21:27,955
Sandboxアカウントを
開発モードで使用して―

318
00:21:28,655 --> 00:21:30,424
管理できます

319
00:21:30,858 --> 00:21:33,994
iOS 12からは
個別デバイスで―

320
00:21:34,428 --> 00:21:37,965
アプリケーションのテストに
差が出ます

321
00:21:39,967 --> 00:21:42,469
では ロスを再び呼んで―

322
00:21:42,569 --> 00:21:47,107
トランザクション処理の
ベストプラクティスを聞きます

323
00:21:47,207 --> 00:21:47,941
ロス

324
00:21:48,609 --> 00:21:52,646
(拍手)

325
00:21:55,549 --> 00:21:59,953
例を挙げながら
最適な方法を説明します

326
00:22:01,054 --> 00:22:05,325
まずトランザクション
オブザーバを―

327
00:22:05,425 --> 00:22:07,728
なるべく早く追加します

328
00:22:09,696 --> 00:22:15,469
トランザクション開始まで
追加されていない場合が―

329
00:22:15,569 --> 00:22:17,471
かなり見られます

330
00:22:18,138 --> 00:22:20,274
お勧めの追加時期は―

331
00:22:20,374 --> 00:22:24,177
AppDelegateのdidFinishLaunching
WithOptionsメソッド中です

332
00:22:25,913 --> 00:22:31,018
ユーザがアプリケーションで
行う変更は重要であり―

333
00:22:31,118 --> 00:22:36,056
StoreKitはオブザーバで
変更を処理するからです

334
00:22:36,423 --> 00:22:41,094
適切な処理はユーザと
ビジネス双方に有益です

335
00:22:42,829 --> 00:22:45,566
トランザクションの
中断例を挙げます

336
00:22:46,433 --> 00:22:51,405
例えばトランザクション中に
ユーザが離れた場合―

337
00:22:52,473 --> 00:22:55,876
アプリケーションは
システムが終了します

338
00:22:56,343 --> 00:23:01,949
トランザクションオブザーバなしで
再開時の処理続行が判断できません

339
00:22:56,343 --> 00:23:01,949
トランザクションオブザーバなしで
再開時の処理続行が判断できません

340
00:23:02,416 --> 00:23:06,720
またユーザが新たな購入を
行うと―

341
00:23:07,588 --> 00:23:11,792
プロンプトが２つ表示され
混乱します

342
00:23:12,159 --> 00:23:13,260
よくありません

343
00:23:15,095 --> 00:23:19,766
またユーザは請求情報の
入力中に離れることも

344
00:23:19,900 --> 00:23:25,139
スムーズに処理を再開したいなら
早期追加すべきです

345
00:23:27,174 --> 00:23:30,043
最後の例は異常終了です

346
00:23:30,244 --> 00:23:33,213
この場合も
スムーズな再開が理想です

347
00:23:36,016 --> 00:23:40,120
早期追加すべき理由は
他にもあります

348
00:23:41,021 --> 00:23:44,258
アプリケーション外の
トランザクションがあります

349
00:23:45,225 --> 00:23:48,295
トランザクションオブザーバ経由の
定期購読更新です

350
00:23:49,096 --> 00:23:53,967
自動更新が成功すると
トランザクションを受けます

351
00:23:54,968 --> 00:23:56,270
早く受け取り―

352
00:23:56,370 --> 00:24:01,108
ユーザの支払い時に
中断しないようにします

353
00:23:56,370 --> 00:24:01,108
ユーザの支払い時に
中断しないようにします

354
00:24:03,110 --> 00:24:04,945
App内課金では―

355
00:24:05,045 --> 00:24:09,216
トランザクションはクリックで
アプリケーションに引き渡されます

356
00:24:09,449 --> 00:24:11,885
スムーズな移行が必要です

357
00:24:13,587 --> 00:24:18,859
最後にプロモコードはStoreで
処理されて送られます

358
00:24:23,263 --> 00:24:26,833
finishTransactionを
いつ呼び出すか？

359
00:24:27,935 --> 00:24:33,173
トランザクションの成功後
コンテンツをダウンロードし

360
00:24:33,273 --> 00:24:36,777
ユーザに提供した後
呼び出します

361
00:24:36,877 --> 00:24:39,713
または処理の失敗時です

362
00:24:41,014 --> 00:24:42,282
では ここで―

363
00:24:42,916 --> 00:24:47,054
各ステータスと
処理方法を説明します

364
00:24:48,088 --> 00:24:49,423
purchasingでは―

365
00:24:49,857 --> 00:24:54,628
特に処理は必要なく
ステータス変更を待ちます

366
00:24:56,430 --> 00:24:59,466
purchasedは完了を示します

367
00:25:00,000 --> 00:25:03,971
コンテンツを提供し
finishTransactionを呼び出します

368
00:25:06,140 --> 00:25:09,676
failedは
処理の失敗を示します

369
00:25:10,010 --> 00:25:15,282
エラーを検証して
UI更新やレコード分析など

370
00:25:15,582 --> 00:25:17,518
必要な作業をします

371
00:25:18,185 --> 00:25:19,786
ユーザによる―

372
00:25:20,587 --> 00:25:24,291
キャンセルでも
failedになります

373
00:25:24,458 --> 00:25:29,897
キャンセルの場合は
UIの表示は必要ありません

374
00:25:29,997 --> 00:25:32,766
ユーザへの表示は不要です

375
00:25:35,836 --> 00:25:38,639
restoredステータスは―

376
00:25:39,072 --> 00:25:44,344
処理の完了なのでユーザに
コンテンツを提供します

377
00:25:44,545 --> 00:25:46,246
finishTransactionを
呼び出します

378
00:25:48,649 --> 00:25:52,653
deferredは
purchasingと同様です

379
00:25:52,986 --> 00:25:56,690
外部アクションの待機を
示します

380
00:25:57,424 --> 00:25:59,960
Ask to Buy機能は―

381
00:26:00,427 --> 00:26:03,130
ペアレント承認機能です

382
00:26:03,230 --> 00:26:06,433
親が手動で
承認か拒否を選択します

383
00:26:07,501 --> 00:26:09,736
ユーザの任意設定なので―

384
00:26:10,137 --> 00:26:14,341
App内課金での
適切な処置が重要です

385
00:26:17,678 --> 00:26:19,046
トランザクションが―

386
00:26:20,114 --> 00:26:22,716
Ask to Buyで
deferredだとします

387
00:26:23,250 --> 00:26:28,155
ユーザには親に通知済みだと
表示されます

388
00:26:29,490 --> 00:26:30,624
承認されると―

389
00:26:31,625 --> 00:26:35,629
トランザクションオブザーバに
返され purchasedになります

390
00:26:35,996 --> 00:26:40,868
承認の通知 コンテンツ提供
呼び出しを行います

391
00:26:43,036 --> 00:26:46,773
拒否された場合は
failedになります

392
00:26:47,007 --> 00:26:51,545
ユーザに拒否を通知して
呼び出します

393
00:26:52,179 --> 00:26:57,651
ただし24時間以内に
アクションが取られないと

394
00:26:57,751 --> 00:27:01,455
トランザクションは
静かに失敗します

395
00:26:57,751 --> 00:27:01,455
トランザクションは
静かに失敗します

396
00:27:02,022 --> 00:27:05,325
トランザクションオブザーバには
何も返されません

397
00:27:05,592 --> 00:27:06,660
そのうえ―

398
00:27:07,161 --> 00:27:12,432
24時間以内のAsk to Buyは
単一の要求に統合されます

399
00:27:13,400 --> 00:27:18,939
ですからdeferredの
トランザクションは待たずに

400
00:27:19,039 --> 00:27:23,477
アプリケーションの使用を
続行させてください

401
00:27:24,645 --> 00:27:26,914
もう１つ注意点です

402
00:27:27,014 --> 00:27:30,450
SKDownload経由
Appleホストコンテンツでは

403
00:27:30,818 --> 00:27:35,722
呼び出し前にダウンロードを
完了させてください

404
00:27:36,857 --> 00:27:39,193
finishTransactionを
呼び出すと―

405
00:27:39,293 --> 00:27:43,797
SKDownloadは
キャンセルされるからです

406
00:27:44,231 --> 00:27:49,169
間違えた場合はrestore
Transactionを呼び出します

407
00:27:49,269 --> 00:27:54,208
ダウンロードが失敗しても
呼び出さず再試行して―

408
00:27:54,308 --> 00:27:58,679
コンテンツをユーザに
提供してください

409
00:28:00,981 --> 00:28:03,517
Receipt Verificationも―

410
00:28:04,451 --> 00:28:08,188
finishTransactionの
呼び出し前です

411
00:28:08,755 --> 00:28:11,792
消耗型の
App内課金には注意を

412
00:28:11,892 --> 00:28:16,230
未完了の場合だけ
レシートに表示されます

413
00:28:16,697 --> 00:28:21,235
呼び出すと表示されず
検証できなくなります

414
00:28:21,702 --> 00:28:24,171
Receipt Verification
使用時には―

415
00:28:24,271 --> 00:28:29,910
ユーザが支払った処理だと
確認してから呼び出します

416
00:28:31,912 --> 00:28:35,048
次はデイナが
レシートを説明します

417
00:28:36,250 --> 00:28:38,752
(拍手)

418
00:28:39,753 --> 00:28:40,988
ありがとう　ロス

419
00:28:43,824 --> 00:28:45,159
レシートとは―

420
00:28:45,993 --> 00:28:49,162
App内課金の記録です

421
00:28:49,263 --> 00:28:54,368
商品を買った時の
紙のレシートと似ています

422
00:28:56,403 --> 00:29:00,641
App Storeから取得する
ファイルのことで―

423
00:28:56,403 --> 00:29:00,641
App Storeから取得する
ファイルのことで―

424
00:29:00,741 --> 00:29:06,380
StoreKitでは作成されず
アプリケーションで読めます

425
00:29:07,648 --> 00:29:11,885
App Storeの署名で
本物と分かります

426
00:29:12,986 --> 00:29:16,890
各自のアプリケーションと
デバイス専用です

427
00:29:17,291 --> 00:29:20,627
レシートとは
実行対象のデバイス上で―

428
00:29:20,727 --> 00:29:24,698
アプリケーションが有効かを
確認する方法です

429
00:29:26,500 --> 00:29:29,536
検証方法は二通りあります

430
00:29:29,636 --> 00:29:32,539
１つはデバイスでの検証です

431
00:29:32,639 --> 00:29:36,743
デバイス上で暗号を使って
検証を行い―

432
00:29:36,844 --> 00:29:40,514
コンテンツを
ロック解除できます

433
00:29:40,614 --> 00:29:44,484
もう１つは
サーバでの検証です

434
00:29:44,585 --> 00:29:50,090
信頼できるサーバに
レシートを送って管理します

435
00:29:51,625 --> 00:29:56,163
itunes.apple.com/
verifyreceiptに―

436
00:29:56,263 --> 00:30:01,435
レシートを送ると
App Storeが検証します

437
00:29:56,263 --> 00:30:01,435
レシートを送ると
App Storeが検証します

438
00:30:01,535 --> 00:30:05,038
バックエンドのサービスに
便利です

439
00:30:05,906 --> 00:30:11,011
デバイス検証の説明も
あるので概要にとどめます

440
00:30:11,111 --> 00:30:16,250
詳しくは“Engineering
Subscriptions”でどうぞ

441
00:30:16,350 --> 00:30:20,354
ここホール１で
３時から始まります

442
00:30:22,222 --> 00:30:26,226
サーバ検証について
１点だけ述べます

443
00:30:27,227 --> 00:30:33,333
レシートをデバイスからサーバに
送るのは正しい処置です

444
00:30:34,268 --> 00:30:37,571
ただしデバイスから
レシートを―

445
00:30:37,671 --> 00:30:40,240
直接送信しないように

446
00:30:40,874 --> 00:30:45,779
ユーザのデバイスは
制御されていないのです

447
00:30:45,879 --> 00:30:48,148
App Storeの接続もです

448
00:30:48,248 --> 00:30:51,852
アプリケーションからは
接続しないでください

449
00:30:51,952 --> 00:30:54,822
必ず中間サーバに
送信してください

450
00:30:57,724 --> 00:30:59,893
レシートの構造とは？

451
00:31:00,861 --> 00:31:04,498
購入情報と証明書
署名で構成されます

452
00:31:04,631 --> 00:31:07,935
このためのAPIを提供します

453
00:31:08,502 --> 00:31:10,437
レシートは単一ファイルです

454
00:31:12,139 --> 00:31:14,842
オープンソース標準を
使用します

455
00:31:15,109 --> 00:31:17,811
PKCS暗号コンテナと―

456
00:31:18,078 --> 00:31:21,415
ASN.1で
メタデータを格納します

457
00:31:21,515 --> 00:31:26,553
これらは資料も豊富な
オープンファイル形式です

458
00:31:27,755 --> 00:31:32,125
検証と読み込み用
オプションも豊富です

459
00:31:32,326 --> 00:31:34,194
OpenSSLやasn1c

460
00:31:34,294 --> 00:31:38,031
独自に作成することも
可能です

461
00:31:38,532 --> 00:31:41,135
レシートを読み込むには―

462
00:31:41,235 --> 00:31:44,404
bundle.appStoreReceiptURLを
呼び出します

463
00:31:44,505 --> 00:31:49,843
返されるURLはファイルへの
パスにすぎません

464
00:31:50,210 --> 00:31:54,448
内容を読み込み
BLOBをメモリに格納します

465
00:31:54,548 --> 00:31:56,750
サーバ検証の場合は―

466
00:31:56,850 --> 00:32:00,954
サーバに送ります
またはデバイス処理です

467
00:31:56,850 --> 00:32:00,954
サーバに送ります
またはデバイス処理です

468
00:32:01,889 --> 00:32:07,027
OpenSSLで処理する場合の
アドバイスです

469
00:32:07,127 --> 00:32:10,030
動的ライブラリではなく―

470
00:32:10,430 --> 00:32:14,468
静的ライブラリを
使う方が安全です

471
00:32:15,636 --> 00:32:19,039
Apple Root CA証明書を
使用する場合―

472
00:32:19,139 --> 00:32:24,511
オンラインで取得できますし
文書も多数あります

473
00:32:24,611 --> 00:32:27,247
ただし期限切れにご注意を

474
00:32:30,450 --> 00:32:33,987
ソリューションは
数多くありますが―

475
00:32:34,288 --> 00:32:37,691
そのリスクも
認識してください

476
00:32:37,791 --> 00:32:41,428
実装するソリューションの
リスクを―

477
00:32:41,528 --> 00:32:43,831
理解する必要があります

478
00:32:44,331 --> 00:32:49,736
使用中のソリューションに
脆弱性が発見された場合―

479
00:32:50,137 --> 00:32:52,840
アプリケーションも危険です

480
00:32:54,007 --> 00:32:58,679
注意して選び
各自の収入源を守りましょう

481
00:33:02,115 --> 00:33:06,720
レシートには署名と
証明書があります

482
00:33:07,020 --> 00:33:08,655
ベストプラクティスとして

483
00:33:09,490 --> 00:33:15,362
証明書の有効期限は
現在時刻で確認しないこと

484
00:33:15,729 --> 00:33:19,867
ユーザがデバイスの時刻を
変更することが―

485
00:33:20,667 --> 00:33:22,002
可能だからです

486
00:33:24,004 --> 00:33:25,973
そしてレシートは―

487
00:33:26,073 --> 00:33:30,277
証明書が期限切れでも
無効とは限りません

488
00:33:30,711 --> 00:33:34,948
トランザクションの日付と
比較してください

489
00:33:35,048 --> 00:33:37,117
全トランザクションが―

490
00:33:37,217 --> 00:33:41,422
有効期限前なら
有効なレシートです

491
00:33:44,124 --> 00:33:47,828
ではレシートの詳細に
移りましょう

492
00:33:48,495 --> 00:33:52,666
購入情報には
タイプと属性が含まれます

493
00:33:53,133 --> 00:33:55,769
この例にもバンドルIDと―

494
00:33:56,437 --> 00:33:58,705
関連する値があります

495
00:34:01,375 --> 00:34:04,945
アプリケーションの
レシートを確認する場合―

496
00:34:05,045 --> 00:34:07,314
バンドルIDを確認します

497
00:34:07,781 --> 00:34:12,252
タイプ３はアプリケーションの
バージョンを示します

498
00:34:14,121 --> 00:34:17,524
ハードコーティング値を
使い―

499
00:34:17,623 --> 00:34:20,594
Info.plistのみを
参照しないように

500
00:34:20,694 --> 00:34:23,496
Info.plistを変更して―

501
00:34:23,597 --> 00:34:26,800
なりすますのが
簡単だからです

502
00:34:27,734 --> 00:34:32,505
レシートのバンドルIDと
バージョンを確認したら―

503
00:34:32,973 --> 00:34:36,109
デバイスで有効かを
確認します

504
00:34:36,208 --> 00:34:38,879
属性５を使用してください

505
00:34:39,213 --> 00:34:43,717
属性５はカップル値の
SHA-1ハッシュです

506
00:34:44,518 --> 00:34:49,623
バンドルID デバイスID
アプリケーションの―

507
00:34:49,723 --> 00:34:53,360
実行ハードウェアと
オペーク値が含まれます

508
00:34:53,460 --> 00:34:59,099
暗号的で経時変化しますが
タイプ４として格納されます

509
00:34:59,433 --> 00:35:04,171
これら３つの値で
SHA-1ハッシュを生成します

510
00:34:59,433 --> 00:35:04,171
これら３つの値で
SHA-1ハッシュを生成します

511
00:35:04,738 --> 00:35:10,377
レシートの値とハッシュを
比較して一致していれば―

512
00:35:10,477 --> 00:35:14,548
該当デバイスで
生成されたレシートです

513
00:35:17,351 --> 00:35:19,953
レシートが無効な場合―

514
00:35:21,255 --> 00:35:23,657
または存在しない場合は？

515
00:35:24,825 --> 00:35:29,763
StoreKitのAPIで
新規レシートを要求します

516
00:35:30,130 --> 00:35:33,200
商用バックエンドが
介在するので―

517
00:35:33,300 --> 00:35:37,771
この操作には
ネットワークが必要です

518
00:35:38,572 --> 00:35:44,144
本物のユーザからの
レシートだと確認するためには

519
00:35:44,244 --> 00:35:46,113
サインインが必要です

520
00:35:48,348 --> 00:35:50,918
レシート更新が
終わったら―

521
00:35:51,018 --> 00:35:54,421
検証が
ループしないようにします

522
00:35:54,521 --> 00:35:59,860
更新されたレシートが
無効ならエラーにします

523
00:36:00,494 --> 00:36:02,196
コードはこうです

524
00:36:02,729 --> 00:36:05,899
SKReceiptRefreshRequestを
呼び出し―

525
00:36:05,999 --> 00:36:11,071
購入キューをdelegateにして
startを呼び出します

526
00:36:11,171 --> 00:36:15,175
レシートの更新が終われば
通知されます

527
00:36:17,244 --> 00:36:22,516
macOSではexit(173)を
呼び出せます

528
00:36:22,616 --> 00:36:26,420
このコードがOSと
StoreKitでレシートを

529
00:36:26,520 --> 00:36:28,822
リフレッシュさせます

530
00:36:29,223 --> 00:36:32,526
アプリケーションは
再起動されます

531
00:36:34,761 --> 00:36:37,097
先ほども触れましたが―

532
00:36:37,197 --> 00:36:42,236
非定期購読型でも
無料トライアルを使えます

533
00:36:42,336 --> 00:36:46,106
その際 レシートで
トライアル期間中か―

534
00:36:46,807 --> 00:36:50,244
完全ロック解除を購入したか
確認できます

535
00:36:52,012 --> 00:36:56,417
レシート内のタイプ17で
確認してください

536
00:36:56,517 --> 00:37:02,156
定期購読のApp内課金情報が
すべて含まれています

537
00:36:56,517 --> 00:37:02,156
定期購読のApp内課金情報が
すべて含まれています

538
00:37:03,190 --> 00:37:08,162
タイプ17内には
２種類のデータがあります

539
00:37:10,430 --> 00:37:15,636
タイプ1702は製品IDで
非消耗型のApp内課金と

540
00:37:15,736 --> 00:37:17,905
関連付けられています

541
00:37:18,438 --> 00:37:20,741
ここを確認すれば―

542
00:37:20,841 --> 00:37:24,645
無料トライアルの開始が
分かります

543
00:37:24,745 --> 00:37:27,915
アプリケーションの
完全ロック解除もです

544
00:37:29,283 --> 00:37:33,086
タイプ1704では
消耗型のApp内課金の

545
00:37:33,187 --> 00:37:35,589
購入日が分かります

546
00:37:38,325 --> 00:37:40,561
アルゴリズムはこうです

547
00:37:40,661 --> 00:37:46,066
タイプ17のApp内課金を
すべて反復処理します

548
00:37:46,967 --> 00:37:51,104
完全ロック解除の製品IDが
あれば―

549
00:37:51,205 --> 00:37:54,675
その時点で作業は終わりです

550
00:37:54,775 --> 00:37:59,880
完全ロック解除を購入したユーザに
アクセスを与えます

551
00:38:01,215 --> 00:38:03,617
もう１つのケースです

552
00:38:03,717 --> 00:38:08,989
無料トライアルの製品IDが
ある場合は―

553
00:38:09,089 --> 00:38:12,726
関連付けられた購入日を
確認します

554
00:38:13,594 --> 00:38:15,362
ここからが複雑です

555
00:38:15,963 --> 00:38:19,366
デバイスの時刻は
信頼できません

556
00:38:19,466 --> 00:38:23,437
バックエンドサーバを
各自で用意して―

557
00:38:23,537 --> 00:38:26,874
無料期間中かどうかを
確認します

558
00:38:27,641 --> 00:38:29,977
DeviceCheck APIは―

559
00:38:30,077 --> 00:38:33,580
役に立つので
使用をお勧めします

560
00:38:33,680 --> 00:38:38,018
以前に無料トライアルを
完了済みか分かります

561
00:38:39,687 --> 00:38:45,292
最後にまだ無料トライアルを
実装していない場合は―

562
00:38:45,392 --> 00:38:50,097
これを機会に
始めることをお勧めします

563
00:38:50,197 --> 00:38:55,135
その際は無料期間と
完全ロック解除の料金―

564
00:38:55,235 --> 00:38:59,073
購入しない場合に
失われる内容を示します

565
00:39:01,642 --> 00:39:05,546
すでにアプリケーションを
販売中の方もいれば―

566
00:39:05,646 --> 00:39:09,249
無料トライアルを
検討中の方もいます

567
00:39:10,050 --> 00:39:13,754
レシートが
役立つ場面があります

568
00:39:14,555 --> 00:39:18,926
定期購読モデルや
無料トライアルに―

569
00:39:19,026 --> 00:39:23,364
前払いから移行する場合
タイプ19を使います

570
00:39:23,697 --> 00:39:29,203
最初に購入された時の
バージョンが分かります

571
00:39:29,937 --> 00:39:34,174
アプリケーションを削除して
再ダウンロードしても―

572
00:39:34,274 --> 00:39:37,611
初回購入時の
バージョンが示されます

573
00:39:39,446 --> 00:39:42,683
最初に前払いを
選んだユーザには―

574
00:39:42,783 --> 00:39:45,986
該当する機能を
提供してください

575
00:39:46,153 --> 00:39:49,490
定期購読モデルに
移行しても―

576
00:39:49,590 --> 00:39:52,226
購入条件は変わりません

577
00:39:52,326 --> 00:39:56,163
最初に購入した内容を
提供します

578
00:39:58,065 --> 00:40:00,901
レシート内の
タイプ19を使うと―

579
00:39:58,065 --> 00:40:00,901
レシート内の
タイプ19を使うと―

580
00:40:01,001 --> 00:40:03,837
購入バージョンが分かります

581
00:40:05,772 --> 00:40:07,207
おさらいです

582
00:40:07,307 --> 00:40:08,942
お試し価格は―

583
00:40:09,042 --> 00:40:13,714
アプリケーションで
顧客を開拓できる手段です

584
00:40:13,814 --> 00:40:16,350
App内課金では―

585
00:40:17,017 --> 00:40:20,254
App Storeで
内容を提示します

586
00:40:20,954 --> 00:40:26,860
非定期購読サービスの
無料トライアルも説明しました

587
00:40:27,794 --> 00:40:30,831
SKStoreReviewControllerと

588
00:40:31,231 --> 00:40:36,036
デベロッパの反応についても
ご紹介しました

589
00:40:37,104 --> 00:40:41,341
Sandbox環境についても―

590
00:40:41,441 --> 00:40:45,045
本番アカウントとの違いを
説明しました

591
00:40:45,679 --> 00:40:50,851
トランザクション処理を
ロスが説明しました

592
00:40:50,951 --> 00:40:56,390
finishTransaction呼び出しの
タイミングもお話ししました

593
00:40:56,623 --> 00:41:02,396
最後にApp内課金レシートの
デバイス検証と―

594
00:40:56,623 --> 00:41:02,396
最後にApp内課金レシートの
デバイス検証と―

595
00:41:02,496 --> 00:41:06,467
無料トライアルへの移行を
説明しました

596
00:41:08,135 --> 00:41:12,072
詳細は“Engineering
Subscriptions”へどうぞ

597
00:41:12,172 --> 00:41:14,475
ぜひご参加ください

598
00:41:14,575 --> 00:41:19,580
ラボも本日午後４時と
木曜日午前９時にあります

599
00:41:19,680 --> 00:41:22,616
質問にも答える予定です

600
00:41:22,716 --> 00:41:24,084
どうもありがとう

601
00:41:24,184 --> 00:41:28,021
(拍手)